{
  
    
        "post0": {
            "title": "Hello to Badminton",
            "content": "Definition . Badminton is an indoor sport of hitting a small ball made of feathers and cork with a long-handled net racket across a net. . Preparation! . Here are the things we need: . shuttlecock(Bird/Birdie) | badminton racket | two persons | empty space | . Steps . 1.To play badminton you first need to have the correct grip. First, use the thumb and index finger to pinch the two wide sides of the handle, the tiger’s mouth is aligned with the side edge, and the other three fingers follow the trend and stick to the wide side of the index finger in turn to form a grip. . . 2.Always hit the center of the ball. As a novice, I suggest that you should hit the center of the round rubber ball head every time, this will improve your accuracy and success rate without missing the ball . . 3.Hit the ball with the highest point centered on you. Whether it’s serving or catching, hitting the ball at the highest point is the best way to control where it falls, and don’t wait until the ball is getting close to you before hitting it, otherwise the ball will lose momentum and height. . . 4.Hit the ball to the bottom line. It takes precision and power to hit the ball to the back line, which can make your opponent have to back off and take a lot of effort to get your ball back. If you’re not sure where to hit the next shot, and there’s a lot of space in the backcourt, go there. In the beginning, aim the ball a little bit ahead of the baseline so you won’t hit the ball if it goes beyond the baseline. . . 5.Always return to the center of the field. No matter what the situation is, you should return to the center of the court after serving and receiving the ball, so that you can deal with emergencies at the first time, and prevent the opponent from using the distance difference to prevent us from receiving the ball and then winning. . . Hacks . Test running a Python file directly . From python directory run quiz.py in VS Code, this will show workflow of Input and Output in terminal | . Build your own Jupyter Notebook meeting these College Board and CTE competencies . Build your own quiz, including my questions and show outputs | Create both Markdown for description and Code for execution | Structure your Python code with comments “#” to complement Markdown descriptions | . Additional requirements . Build your quiz so that it captures the key Vocabulary from this Jupyter document | Calculate the percentage of your quiz | Review College Board Big Idea outline, see if you can reference locations in Markdown that support vocabulary | . Extra credit, Advanced . Do you see repeating pattern of code? Try to implement solution to avoid the repeating pattern (hint: list and iteration) | .",
            "url": "https://zeen1717.github.io/zeeeeen/badminton",
            "relUrl": "/badminton",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 18 print(&quot;age&quot;, age, type(age)) print() print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) PhoneNumber = &quot;254-523-4568&quot; print(&quot;PhoneNumber&quot;, PhoneNumber, type(PhoneNumber)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;Phonenumber&quot;: PhoneNumber, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name John Doe &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 18 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? PhoneNumber 254-523-4568 &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 90.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; length 3 - langs[0] Python &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;John Doe&#39;, &#39;age&#39;: 18, &#39;Phonenumber&#39;: &#39;254-523-4568&#39;, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; length 5 - person[&#34;name&#34;] John Doe &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being built on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will be able collect many instances of that pattern. . List is used to collect many instances of a pattern | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration this example will explore constructing a List of people and cars. . As we learned above, a List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list. A class usually has extra method to support working with its objects/instances. | In the example below, the expression is appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries, or a collection of many similar data patterns. The output looks similar to JavaScript Object Notation (JSON), Jekyll/GitHub pages yml files, FastPages Front Matter. As discussed we will see this key/value patter often, you will be required to understand this data structure and understand the parts. Just believe it is peasy ;) and it will become so. | . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;PhoneNumber&quot;: &quot;254-523-4568&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;PhoneNumber&quot;: &quot;541-251-7845&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Steven&quot;, &quot;LastName&quot;: &quot;Eric&quot;, &quot;DOB&quot;: &quot;November 11&quot;, &quot;Residence&quot;: &quot;New York city&quot;, &quot;PhoneNumber&quot;: &quot;895-751-2445&quot;, &quot;Email&quot;: &quot;seric@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;Toyota Highlander&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Honey&quot;, &quot;LastName&quot;: &quot;Campbell&quot;, &quot;DOB&quot;: &quot;March 3&quot;, &quot;Residence&quot;: &quot;Denver&quot;, &quot;PhoneNumber&quot;: &quot;564-189-3874&quot;, &quot;Email&quot;: &quot;hcampbell@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;Ford F-Series&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;PhoneNumber&#39;: &#39;254-523-4568&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;PhoneNumber&#39;: &#39;541-251-7845&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}, {&#39;FirstName&#39;: &#39;Steven&#39;, &#39;LastName&#39;: &#39;Eric&#39;, &#39;DOB&#39;: &#39;November 11&#39;, &#39;Residence&#39;: &#39;New York city&#39;, &#39;PhoneNumber&#39;: &#39;895-751-2445&#39;, &#39;Email&#39;: &#39;seric@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;Toyota Highlander&#39;]}, {&#39;FirstName&#39;: &#39;Honey&#39;, &#39;LastName&#39;: &#39;Campbell&#39;, &#39;DOB&#39;: &#39;March 3&#39;, &#39;Residence&#39;: &#39;Denver&#39;, &#39;PhoneNumber&#39;: &#39;564-189-3874&#39;, &#39;Email&#39;: &#39;hcampbell@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;Ford F-Series&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet, to applications, or preparing it to be stored into a database. It is a great way to exchange data between programs and programmers. Exchange of data between programs includes the data type the method/function and the format of the data type. These concepts are key to learning how to write functions, receive, and return data. This process is often referred to as an Application Programming Interface (API). . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Phone:&quot;, d_rec[&quot;PhoneNumber&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Phone: 254-523-4568 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Phone: 541-251-7845 Cars: 4Runner Steven Eric Residence: New York city Birth Day: November 11 Phone: 895-751-2445 Cars: Toyota Highlander Honey Campbell Residence: Denver Birth Day: March 3 Phone: 564-189-3874 Cars: Ford F-Series . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . # while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Phone: 254-523-4568 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Phone: 541-251-7845 Cars: 4Runner Steven Eric Residence: New York city Birth Day: November 11 Phone: 895-751-2445 Cars: Toyota Highlander Honey Campbell Residence: Denver Birth Day: March 3 Phone: 564-189-3874 Cars: Ford F-Series . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Phone: 254-523-4568 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Phone: 541-251-7845 Cars: 4Runner Steven Eric Residence: New York city Birth Day: November 11 Phone: 895-751-2445 Cars: Toyota Highlander Honey Campbell Residence: Denver Birth Day: March 3 Phone: 564-189-3874 Cars: Ford F-Series . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://zeen1717.github.io/zeeeeen/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hello!! This is Zeen!!🙂 I am a student in Del Norte High School! Let me show you some pictures of Husky🐶. They are very cute, right? . . . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://zeen1717.github.io/zeeeeen/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://zeen1717.github.io/zeeeeen/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}