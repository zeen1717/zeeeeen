{
  
    
        "post0": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . The Tri 2 Final Project is an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? Metadata . What is the purpose of identity Column in SQL database? column is our part of schema . | What is the purpose of a primary key in SQL database? PRimary key is a integer We make a key to make them unique. . | What are the Data Types in SQL table? integer, varchar, date . | . import sqlite3 database = &#39;files/sqlite.db&#39; # this is location of database # define schema def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries # these 2 enable us to connect to SQLdb cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() # schema is a meta data for database schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? | Same for cursor object? | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$emnmAqhZXtMKqQ8f$4cf572b1b9463d8a8ef5e9f26d28b58b51135e51c1999fd2ecff04a8e4fd9b88&#39;, &#39;1847-02-11&#39;) (2, &#39;Nicholas Tesla&#39;, &#39;niko&#39;, &#39;sha256$BWkJINUztbZwOOIf$efba933e7f36f3aecf34bf77943897c12cc400bba729d5110521d9309b20b5ca&#39;, &#39;2023-02-23&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$z2LndQpSdVmTVkwZ$087ceb79896d9f05b3bc3309bc97f21814da28cfde7e90d9cabf6eb2d81fb440&#39;, &#39;2023-02-23&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$e3jKjqXVXKoCMQsO$e05dc702436e071382582f3270c4a5b3f19f8c3f11d46b69c0a5a3f40fe44ec4&#39;, &#39;2023-02-23&#39;) (5, &#39;John Mortensen&#39;, &#39;jm1021&#39;, &#39;sha256$3vr6s8bl6FyEsRSZ$fa0104dcef546567e6b5518288d5c46eb268dfacd49a54770702a7888525fdd4&#39;, &#39;1959-10-21&#39;) (6, &#39;r&#39;, &#39;s&#39;, &#39;&#39;, &#39;&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? | Explain purpose of SQL INSERT. Is this the same as User init? | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | Explain try/except, when would except occur? | What code seems to be repeated in each of these examples to point, why is it repeated? | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | What is the &quot;f&quot; and {uid} do? | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | . It&#39;s resursion . Could you refactor this menu? Make it work with a List? | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Create a new Table or do something new, sqlite documentation | In implementation in previous bullet, do you see procedural abstraction? | .",
            "url": "https://zeen1717.github.io/zeeeeen/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "U3 S8 and S10",
            "content": "Vocabulary . Iteration: refers to the repetition of processes in an instruction | for loop :The command is repeated a certain number of times | while loop: the instruction is repeated until the requirement is reached | Initialization: starting value of variable. | Lists: Sets in iterable data | Nested lists: several similar arrays of data grouped together | . Notes . For loop repeats a function a certain number of times | The while loop is used to repeat a piece of code a certain number of times until the condition is met. | The while loop is very similar to the if condition, except that while is executed continuously until it is no longer true, while if is executed only once. | List index starts at 0 in the list | append adds an element at the end, remove removes it at the index, and pop removes the last item. | Exercise#1 . Task Reverse a list utilizing features of lists and iteration Hint: Use two parameters with the range function . list = [1, 2, 3, 4, 5] # Print this in reverse order for number in range(5, 0, -1): print(number) . 5 4 3 2 1 . Exercise #2 . Task Similar to insertion sort, this algorithm takes an unsorted array and returns a sorted array Unlike insertion sort where you iterate through the each element and move the smaller elements to the front, this algorithm starts at the beginning and swaps the position of every element in the array . Expected Output: The sorted array from 1-10 . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] # Sort this array using bubble sort def BubbleSort(list) : length = len(list) for i in range(length): for a in range(0, length-i-1): if list[a] &gt; list[a+1]: tem = list [a + 1] list [a + 1] = list [a] list [a] = tem if __name__ == &quot;__main__&quot;: BubbleSort(list) print (&quot;Sorted Array:&quot;) for i in range(len(list)): print(&quot;%d&quot; % list[i], end=&quot; &quot;) . Sorted Array: 0 1 2 3 4 5 6 7 8 9 . . A while loop loops over an interval until a condition is met, a for loop iterates over an iterable object and lasts a certain amount of time. . . Use a for loop to iterate through the list until the user inputs quit .",
            "url": "https://zeen1717.github.io/zeeeeen/2023/03/15/U3-S8-10.html",
            "relUrl": "/2023/03/15/U3-S8-10.html",
            "date": " • Mar 15, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "U3 S12-13 Homework",
            "content": "Notes . Procedures can perform certain operations but do not return values | Procedures can be used to convert values | The name of the procedure must be descriptive | We can modularize procedures by dividing complex procedures into several simple procedures | . 3.12 Hacks part 1 . Problem 1: This problem involves parameters Qais is writing code to calculate formulas from his math class. He&#39;s currently working on a procedure to calculate average speed, based on this formula: . Average speed= . Total Time/Total Distance​ . Highlight which of these is the best procedure for calculating and displaying average speed. PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) } . Problem 2: Procedures with return values James Hunter is looking through his classmate&#39;s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion) . { moreEnergy ← CONCAT(myEmotion, &quot;!!!&quot;) . moreVolume ← UPPER(moreEnergy) . RETURN moreVolume } . That procedure manipulates strings using two built-in procedures, CONCAT for concatenating two strings together, and UPPER for converting a string to uppercase. . James Hunter then sees this line of code: . heightenEmotions(&quot;im mad&quot;) . After that line of code runs, will nothing be displayed? . False . Problem 3: Procedures with return values Bubz is writing a program to calculate the carbon footprint of his activities. The procedure calcFlightFootprint calculates the pounds of carbon dioxide produced per passenger in a flight that covers a given number of miles and seats a given number of passengers. . PROCEDURE calcFlightFootprint(numMiles, numPassengers) { CO2_PER_MILE ← 53.29 . carbonPerFlight ← numMiles * CO2_PER_MILE . carbonPerPassenger ← carbonPerFlight / numPassengers . RETURN carbonPerPassenger . } . Bubz wants to use that procedure to calculate the total footprint for his two upcoming flights: LA to NY: 2,451 miles and 118 passengers NY to London: 3,442 miles and 252 passengers . Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) . laNyCarbon ← calcFlightFootprint(2451, 118) nyLondonCarbon ← calcFlightFootprint(3442, 252) totalFootprint ← laNyCarbon + nyLondonCarbon . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . 3.12 Hacks part 2 . PROCEDURE find a () . { c -- 9 . b &lt;-- 9 * 9 . a &lt;-- b * c . Print (a) . } . What is a? . a=729 . cost ⟵ 173 tax - 10% . PROCEDURE applytax (cost, cpercentDiscounted) { temp &lt;-- 100 + percentTaxed . temp &lt;-- temp / 100 . cost &lt;-- cost x temp . Print(cost)} . What is the cost? . cost is 190.3 . Tempature - 103 Degrees . PROCEDURE convet Fahrenheit (tempature) . { . Celsius &lt;-- tempature - 32 . Celsius &lt;-- Celsius x 5/9 . Print (Celsius)} . Celsius is 39.44 . 3.13 Homework/Hacks for Part 1 and Part 2 of the lesson . Create a procedure that is meant to replace the top running backs yards per game in one season if the current running back has more yards per game | Necessary Parameters: toprbyardspg(100), currentrbyards(1260), totalGames(12) . PROCEDURE updateByardspg(toprbyardspg, currentrbyards, totalGames) { currentrbyardspg &lt;-- currentrbyards/totalGames if (currentrbyardspg &gt; toprbyardspg) { toprbyardspg &lt;-- currentrbyards } return(toprbyardspg) } . Write a procedure that will allow the A+ to get to the 1, while avoiding the black boxes. | Use what you learned about moving robots . PROCEDURE A+GetTo1() { move_Forward() rotate_left() move_Forward() move_Forward() rotate_right() move_Forward() move_Forward() move_Forward() rotate_left() move_Forward() move_Forward() rotate_left() move_Forward() move_Forward() rotate_right() move_Forward() rotate_left() move_Forward() move_Forward() } . Which Is the Correct Way to define the Name of a Procedure? | A. PROCEDURE MYLIST . B. PROCEDURE MyList . C. procedure mylist . B . Write A Procedure That gets the BeachBall To the Green Square | PROCEDURE GetBeachballToGreen() { move_Forward() rotate_left() move_Forward() rotate_right() move_Forward() move_Forward() move_Forward() move_Forward() move_Forward() rotate_left() move_Forward() move_Forward() } .",
            "url": "https://zeen1717.github.io/zeeeeen/2023/03/15/U3-S12-13.html",
            "relUrl": "/2023/03/15/U3-S12-13.html",
            "date": " • Mar 15, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? | . Flask app object | SQLAlchemy object | &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class | class User purpose | db.Model inheritance | init method | @property, @.setter&lt;/li&gt; additional methods | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL # Class : Fining template for user class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object # Property attributes and methods # We are adding to our template database information id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) # init is to help Enable us to instantiate method def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # instantiate U one password if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object # getter enable us retrieve data out of the object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation # setter enable us to change attribute @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? | . Create All Tables from db Object | User Object Constructors | Try / Except | &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): # create all include databse and tables &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() # user table &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; # debuging. &quot;try&quot; allows you to test your code for errors, &quot;except&quot; allows you to handle errors for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . NameError Traceback (most recent call last) /home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 8 in &lt;cell line: 33&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=29&#39;&gt;30&lt;/a&gt; &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=30&#39;&gt;31&lt;/a&gt; print(f&#34;Records exist uid {user.uid}, or error.&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=32&#39;&gt;33&lt;/a&gt; initUsers() /home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 8 in initUsers() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; # user table &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; &#34;&#34;&#34;Tester data for table&#34;&#34;&#34; &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11)) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X10sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) NameError: name &#39;date&#39; is not defined . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following | . User.query.filter_by | user.password | def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first()#vUser filtering by uid return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False # identify if user enter a correct password if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following | . user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid)# search by attribute # try allows you to test your code for errors, except allows you to handle errors try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date()# user&#39;s date of birth except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dbo}&quot;) # write object to database with app.app_context(): # &quot;try&quot; allows you to test your code for errors, &quot;except&quot; allows you to handle errors try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) # Create a new user account create() . NameError Traceback (most recent call last) /home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 12 in &lt;cell line: 40&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X14sdnNjb2RlLXJlbW90ZQ%3D%3D?line=37&#39;&gt;38&lt;/a&gt; print(&#34;Unknown error uid {uid}&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X14sdnNjb2RlLXJlbW90ZQ%3D%3D?line=38&#39;&gt;39&lt;/a&gt; # Create a new user account &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X14sdnNjb2RlLXJlbW90ZQ%3D%3D?line=39&#39;&gt;40&lt;/a&gt; create() /home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 12 in create() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X14sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; def create(): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X14sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; # optimize user time to see if uid exists &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X14sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; uid = input(&#34;Enter your user id:&#34;) -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X14sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; user = find_by_uid(uid)# search by attribute &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X14sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; # try allows you to test your code for errors, except allows you to handle errors &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X14sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; try: NameError: name &#39;find_by_uid&#39; is not defined . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following | . User.query.all | json_ready assignment | # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context() # Filter from all users into a table table = User.query.all() json_ready = [user.read() for user in table] # each user adds user.read() to list return json_ready # Serialized and structured data read() . OperationalError Traceback (most recent call last) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:3256, in Engine._wrap_pool_connect(self, fn, connection) 3255 try: -&gt; 3256 return fn() 3257 except dialect.dbapi.Error as e: File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:310, in Pool.connect(self) 303 &#34;&#34;&#34;Return a DBAPI connection from the pool. 304 305 The connection is instrumented such that when its (...) 308 309 &#34;&#34;&#34; --&gt; 310 return _ConnectionFairy._checkout(self) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:868, in _ConnectionFairy._checkout(cls, pool, threadconns, fairy) 867 if not fairy: --&gt; 868 fairy = _ConnectionRecord.checkout(pool) 870 fairy._pool = pool File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:476, in _ConnectionRecord.checkout(cls, pool) 474 @classmethod 475 def checkout(cls, pool): --&gt; 476 rec = pool._do_get() 477 try: File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/impl.py:256, in NullPool._do_get(self) 255 def _do_get(self): --&gt; 256 return self._create_connection() File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:256, in Pool._create_connection(self) 254 &#34;&#34;&#34;Called by subclasses to create a new ConnectionRecord.&#34;&#34;&#34; --&gt; 256 return _ConnectionRecord(self) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:371, in _ConnectionRecord.__init__(self, pool, connect) 370 if connect: --&gt; 371 self.__connect() 372 self.finalize_callback = deque() File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:666, in _ConnectionRecord.__connect(self) 665 with util.safe_reraise(): --&gt; 666 pool.logger.debug(&#34;Error on connect(): %s&#34;, e) 667 else: 668 # in SQLAlchemy 1.4 the first_connect event is not used by 669 # the engine, so this will usually not be set File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:70, in safe_reraise.__exit__(self, type_, value, traceback) 69 if not self.warn_only: &gt; 70 compat.raise_( 71 exc_value, 72 with_traceback=exc_tb, 73 ) 74 else: File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/compat.py:207, in raise_(***failed resolving arguments***) 206 try: --&gt; 207 raise exception 208 finally: 209 # credit to 210 # https://cosmicpercolator.com/2016/01/13/exception-leaks-in-python-2-and-3/ 211 # as the __traceback__ object creates a cycle File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:661, in _ConnectionRecord.__connect(self) 660 self.starttime = time.time() --&gt; 661 self.dbapi_connection = connection = pool._invoke_creator(self) 662 pool.logger.debug(&#34;Created new connection %r&#34;, connection) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/create.py:590, in create_engine.&lt;locals&gt;.connect(connection_record) 589 return connection --&gt; 590 return dialect.connect(*cargs, **cparams) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/default.py:597, in DefaultDialect.connect(self, *cargs, **cparams) 595 def connect(self, *cargs, **cparams): 596 # inherits the docstring from interfaces.Dialect.connect --&gt; 597 return self.dbapi.connect(*cargs, **cparams) OperationalError: unable to open database file The above exception was the direct cause of the following exception: OperationalError Traceback (most recent call last) /home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 14 in &lt;cell line: 8&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; json_ready = [user.read() for user in table] # each user adds user.read() to list &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; return json_ready -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; read() /home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 14 in read() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; def read(): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; with app.app_context(): -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; table = User.query.all() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; json_ready = [user.read() for user in table] # each user adds user.read() to list &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X16sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; return json_ready File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/query.py:2759, in Query.all(self) 2743 def all(self): 2744 &#34;&#34;&#34;Return the results represented by this :class:`_query.Query` 2745 as a list. 2746 (...) 2757 :ref:`faq_query_deduplicating` 2758 &#34;&#34;&#34; -&gt; 2759 return self._iter().all() File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/query.py:2894, in Query._iter(self) 2891 params = self._params 2893 statement = self._statement_20() -&gt; 2894 result = self.session.execute( 2895 statement, 2896 params, 2897 execution_options={&#34;_sa_orm_load_options&#34;: self.load_options}, 2898 ) 2900 # legacy: automatically set scalars, unique 2901 if result._attributes.get(&#34;is_single_entity&#34;, False): File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/session.py:1691, in Session.execute(self, statement, params, execution_options, bind_arguments, _parent_execute_state, _add_event, **kw) 1687 execution_options = execution_options.union( 1688 dict(future_result=False) 1689 ) 1690 else: -&gt; 1691 conn = self._connection_for_bind(bind) 1692 result = conn._execute_20(statement, params or {}, execution_options) 1694 if compile_state_cls: File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/session.py:1532, in Session._connection_for_bind(self, engine, execution_options, **kw) 1529 TransactionalContext._trans_ctx_check(self) 1531 if self._transaction is not None or self._autobegin(): -&gt; 1532 return self._transaction._connection_for_bind( 1533 engine, execution_options 1534 ) 1536 assert self._transaction is None 1537 assert self.autocommit File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/session.py:747, in SessionTransaction._connection_for_bind(self, bind, execution_options) 742 raise sa_exc.InvalidRequestError( 743 &#34;Session already has a Connection associated for the &#34; 744 &#34;given Connection&#39;s Engine&#34; 745 ) 746 else: --&gt; 747 conn = bind.connect() 748 local_connect = True 750 try: File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:3210, in Engine.connect(self, close_with_result) 3195 def connect(self, close_with_result=False): 3196 &#34;&#34;&#34;Return a new :class:`_engine.Connection` object. 3197 3198 The :class:`_engine.Connection` object is a facade that uses a DBAPI (...) 3207 3208 &#34;&#34;&#34; -&gt; 3210 return self._connection_cls(self, close_with_result=close_with_result) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:96, in Connection.__init__(self, engine, connection, close_with_result, _branch_from, _execution_options, _dispatch, _has_events, _allow_revalidate) 91 self._has_events = _branch_from._has_events 92 else: 93 self._dbapi_connection = ( 94 connection 95 if connection is not None &gt; 96 else engine.raw_connection() 97 ) 99 self._transaction = self._nested_transaction = None 100 self.__savepoint_seq = 0 File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:3289, in Engine.raw_connection(self, _connection) 3267 def raw_connection(self, _connection=None): 3268 &#34;&#34;&#34;Return a &#34;raw&#34; DBAPI connection from the connection pool. 3269 3270 The returned object is a proxied version of the DBAPI (...) 3287 3288 &#34;&#34;&#34; -&gt; 3289 return self._wrap_pool_connect(self.pool.connect, _connection) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:3259, in Engine._wrap_pool_connect(self, fn, connection) 3257 except dialect.dbapi.Error as e: 3258 if connection is None: -&gt; 3259 Connection._handle_dbapi_exception_noconnection( 3260 e, dialect, self 3261 ) 3262 else: 3263 util.raise_( 3264 sys.exc_info()[1], with_traceback=sys.exc_info()[2] 3265 ) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:2106, in Connection._handle_dbapi_exception_noconnection(cls, e, dialect, engine) 2104 util.raise_(newraise, with_traceback=exc_info[2], from_=e) 2105 elif should_wrap: -&gt; 2106 util.raise_( 2107 sqlalchemy_exception, with_traceback=exc_info[2], from_=e 2108 ) 2109 else: 2110 util.raise_(exc_info[1], with_traceback=exc_info[2]) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/compat.py:207, in raise_(***failed resolving arguments***) 204 exception.__cause__ = replace_context 206 try: --&gt; 207 raise exception 208 finally: 209 # credit to 210 # https://cosmicpercolator.com/2016/01/13/exception-leaks-in-python-2-and-3/ 211 # as the __traceback__ object creates a cycle 212 del exception, replace_context, from_, with_traceback File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/base.py:3256, in Engine._wrap_pool_connect(self, fn, connection) 3254 dialect = self.dialect 3255 try: -&gt; 3256 return fn() 3257 except dialect.dbapi.Error as e: 3258 if connection is None: File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:310, in Pool.connect(self) 302 def connect(self): 303 &#34;&#34;&#34;Return a DBAPI connection from the pool. 304 305 The connection is instrumented such that when its (...) 308 309 &#34;&#34;&#34; --&gt; 310 return _ConnectionFairy._checkout(self) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:868, in _ConnectionFairy._checkout(cls, pool, threadconns, fairy) 865 @classmethod 866 def _checkout(cls, pool, threadconns=None, fairy=None): 867 if not fairy: --&gt; 868 fairy = _ConnectionRecord.checkout(pool) 870 fairy._pool = pool 871 fairy._counter = 0 File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:476, in _ConnectionRecord.checkout(cls, pool) 474 @classmethod 475 def checkout(cls, pool): --&gt; 476 rec = pool._do_get() 477 try: 478 dbapi_connection = rec.get_connection() File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/impl.py:256, in NullPool._do_get(self) 255 def _do_get(self): --&gt; 256 return self._create_connection() File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:256, in Pool._create_connection(self) 253 def _create_connection(self): 254 &#34;&#34;&#34;Called by subclasses to create a new ConnectionRecord.&#34;&#34;&#34; --&gt; 256 return _ConnectionRecord(self) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:371, in _ConnectionRecord.__init__(self, pool, connect) 369 self.__pool = pool 370 if connect: --&gt; 371 self.__connect() 372 self.finalize_callback = deque() File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:666, in _ConnectionRecord.__connect(self) 664 except Exception as e: 665 with util.safe_reraise(): --&gt; 666 pool.logger.debug(&#34;Error on connect(): %s&#34;, e) 667 else: 668 # in SQLAlchemy 1.4 the first_connect event is not used by 669 # the engine, so this will usually not be set 670 if pool.dispatch.first_connect: File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/langhelpers.py:70, in safe_reraise.__exit__(self, type_, value, traceback) 68 self._exc_info = None # remove potential circular references 69 if not self.warn_only: &gt; 70 compat.raise_( 71 exc_value, 72 with_traceback=exc_tb, 73 ) 74 else: 75 if not compat.py3k and self._exc_info and self._exc_info[1]: 76 # emulate Py3K&#39;s behavior of telling us when an exception 77 # occurs in an exception handler. File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/util/compat.py:207, in raise_(***failed resolving arguments***) 204 exception.__cause__ = replace_context 206 try: --&gt; 207 raise exception 208 finally: 209 # credit to 210 # https://cosmicpercolator.com/2016/01/13/exception-leaks-in-python-2-and-3/ 211 # as the __traceback__ object creates a cycle 212 del exception, replace_context, from_, with_traceback File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/pool/base.py:661, in _ConnectionRecord.__connect(self) 659 try: 660 self.starttime = time.time() --&gt; 661 self.dbapi_connection = connection = pool._invoke_creator(self) 662 pool.logger.debug(&#34;Created new connection %r&#34;, connection) 663 self.fresh = True File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/create.py:590, in create_engine.&lt;locals&gt;.connect(connection_record) 588 if connection is not None: 589 return connection --&gt; 590 return dialect.connect(*cargs, **cparams) File ~/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/default.py:597, in DefaultDialect.connect(self, *cargs, **cparams) 595 def connect(self, *cargs, **cparams): 596 # inherits the docstring from interfaces.Dialect.connect --&gt; 597 return self.dbapi.connect(*cargs, **cparams) OperationalError: (sqlite3.OperationalError) unable to open database file (Background on this error at: https://sqlalche.me/e/14/e3q8) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Add Update functionality to this blog. | Add Delete functionality to this blog. | . &lt;/div&gt; | .",
            "url": "https://zeen1717.github.io/zeeeeen/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? | . Flask app object | SQLAlchemy object | &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///files/sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class | class User purpose | db.Model inheritance | init method | @property, @.setter&lt;/li&gt; additional methods | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? | . Create All Tables from db Object | User Object Constructors | Try / Except | &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following | . User.query.filter_by | user.password | def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following | . user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dbo}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following | . User.query.all | json_ready assignment | # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # each user adds user.read() to list return json_ready read() . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Add Update functionality to this blog. | Add Delete functionality to this blog. | . &lt;/div&gt; | .",
            "url": "https://zeen1717.github.io/zeeeeen/2023/03/13/AP-unit2-4a-copy.html",
            "relUrl": "/2023/03/13/AP-unit2-4a-copy.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "U3 S8 and S10",
            "content": "Vocabulary . Iteration: refers to the repetition of processes in an instruction | for loop :The command is repeated a certain number of times | while loop: the instruction is repeated until the requirement is reached | Initialization: starting value of variable. | Lists: Sets in iterable data | Nested lists: several similar arrays of data grouped together | . Notes . For loop repeats a function a certain number of times | The while loop is used to repeat a piece of code a certain number of times until the condition is met. | The while loop is very similar to the if condition, except that while is executed continuously until it is no longer true, while if is executed only once. | List index starts at 0 in the list | append adds an element at the end, remove removes it at the index, and pop removes the last item. | Exercise#1 . Task Reverse a list utilizing features of lists and iteration Hint: Use two parameters with the range function . list = [1, 2, 3, 4, 5] # Print this in reverse order for number in range(5, 0, -1): print(number) . 5 4 3 2 1 . Exercise #2 . Task Similar to insertion sort, this algorithm takes an unsorted array and returns a sorted array Unlike insertion sort where you iterate through the each element and move the smaller elements to the front, this algorithm starts at the beginning and swaps the position of every element in the array . Expected Output: The sorted array from 1-10 . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] # Sort this array using bubble sort def BubbleSort(list) : length = len(list) for i in range(length): for a in range(0, length-i-1): if list[a] &gt; list[a+1]: tem = list [a + 1] list [a + 1] = list [a] list [a] = tem if __name__ == &quot;__main__&quot;: BubbleSort(list) print (&quot;Sorted Array:&quot;) for i in range(len(list)): print(&quot;%d&quot; % list[i], end=&quot; &quot;) . Sorted Array: 0 1 2 3 4 5 6 7 8 9 . . A while loop loops over an interval until a condition is met, a for loop iterates over an iterable object and lasts a certain amount of time. . . Use a for loop to iterate through the list until the user inputs quit .",
            "url": "https://zeen1717.github.io/zeeeeen/2023/03/09/U3-S8-10.html",
            "relUrl": "/2023/03/09/U3-S8-10.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "U3 S12-13 Homework",
            "content": "Notes . Procedures can perform certain operations but do not return values | Procedures can be used to convert values | The name of the procedure must be descriptive | We can modularize procedures by dividing complex procedures into several simple procedures | . 3.12 Hacks part 1 . Problem 1: This problem involves parameters Qais is writing code to calculate formulas from his math class. He&#39;s currently working on a procedure to calculate average speed, based on this formula: . Average speed= . Total Time/Total Distance​ . Highlight which of these is the best procedure for calculating and displaying average speed. PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) } . Problem 2: Procedures with return values James Hunter is looking through his classmate&#39;s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion) . { moreEnergy ← CONCAT(myEmotion, &quot;!!!&quot;) . moreVolume ← UPPER(moreEnergy) . RETURN moreVolume } . That procedure manipulates strings using two built-in procedures, CONCAT for concatenating two strings together, and UPPER for converting a string to uppercase. . James Hunter then sees this line of code: . heightenEmotions(&quot;im mad&quot;) . After that line of code runs, will nothing be displayed? . False . Problem 3: Procedures with return values Bubz is writing a program to calculate the carbon footprint of his activities. The procedure calcFlightFootprint calculates the pounds of carbon dioxide produced per passenger in a flight that covers a given number of miles and seats a given number of passengers. . PROCEDURE calcFlightFootprint(numMiles, numPassengers) { CO2_PER_MILE ← 53.29 . carbonPerFlight ← numMiles * CO2_PER_MILE . carbonPerPassenger ← carbonPerFlight / numPassengers . RETURN carbonPerPassenger . } . Bubz wants to use that procedure to calculate the total footprint for his two upcoming flights: LA to NY: 2,451 miles and 118 passengers NY to London: 3,442 miles and 252 passengers . Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) . laNyCarbon ← calcFlightFootprint(2451, 118) nyLondonCarbon ← calcFlightFootprint(3442, 252) totalFootprint ← laNyCarbon + nyLondonCarbon . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . 3.12 Hacks part 2 . PROCEDURE find a () . { c -- 9 . b &lt;-- 9 * 9 . a &lt;-- b * c . Print (a) . } . What is a? . a=729 . cost ⟵ 173 tax - 10% . PROCEDURE applytax (cost, cpercentDiscounted) { temp &lt;-- 100 + percentTaxed . temp &lt;-- temp / 100 . cost &lt;-- cost x temp . Print(cost)} . What is the cost? . cost is 190.3 . Tempature - 103 Degrees . PROCEDURE convet Fahrenheit (tempature) . { . Celsius &lt;-- tempature - 32 . Celsius &lt;-- Celsius x 5/9 . Print (Celsius)} . Celsius is 39.44 . 3.13 Homework/Hacks for Part 1 and Part 2 of the lesson . Create a procedure that is meant to replace the top running backs yards per game in one season if the current running back has more yards per game | Necessary Parameters: toprbyardspg(100), currentrbyards(1260), totalGames(12) . PROCEDURE updateByardspg(toprbyardspg, currentrbyards, totalGames) { currentrbyardspg &lt;-- currentrbyards/totalGames if (currentrbyardspg &gt; toprbyardspg) { toprbyardspg &lt;-- currentrbyards } return(toprbyardspg) } . Write a procedure that will allow the A+ to get to the 1, while avoiding the black boxes. | Use what you learned about moving robots . PROCEDURE A+GetTo1() { move_Forward() rotate_left() move_Forward() move_Forward() rotate_right() move_Forward() move_Forward() move_Forward() rotate_left() move_Forward() move_Forward() rotate_left() move_Forward() move_Forward() rotate_right() move_Forward() rotate_left() move_Forward() move_Forward() } . Which Is the Correct Way to define the Name of a Procedure? | A. PROCEDURE MYLIST . B. PROCEDURE MyList . C. procedure mylist . B . Write A Procedure That gets the BeachBall To the Green Square | PROCEDURE GetBeachballToGreen() { move_Forward() rotate_left() move_Forward() rotate_right() move_Forward() move_Forward() move_Forward() move_Forward() move_Forward() rotate_left() move_Forward() move_Forward() } .",
            "url": "https://zeen1717.github.io/zeeeeen/2023/03/09/U3-S12-13.html",
            "relUrl": "/2023/03/09/U3-S12-13.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame # print dataframe print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) # print top head 10 and tail 10 with dataframe code print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests # define fetch def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . There could be other data that are acutally influencing both of them, they might cause it because they&#39;re refreshing. . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Amazing. . | When choosing a data set, think about the following... . Does it have a good sample size? | Is there bias in the data? | Does the data set need to be cleaned? | What is the purpose of the data set? | ... | . | . It has a good sample size. Any data may be biased. When there is invalid data or redundant data in the data, it should be cleaned up. The purpose of the data set is to make statistical data and make future changes and plans based on the current data . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Calories&#39;], ascending=False) # dataframe mean, median and mode of the dataset print(df.mean()) print(df.median()) print(df.mode()) . Duration 63.846154 Pulse 107.461538 Maxpulse 134.047337 Calories 375.800000 dtype: float64 Duration 60.0 Pulse 105.0 Maxpulse 131.0 Calories 318.6 dtype: float64 Duration Pulse Maxpulse Calories 0 60 100 120 300.0 . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. . Here are some suggestions... . Titanic Dataset:This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. | Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | . These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset... . Kaggle:The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. | UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning Visit Tutorials Point . Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python. . Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . | Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. . Decision Trees, prediction by a piecewise constant approximation. | Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7529411764705882 LogisticRegression Accuracy: 0.788235294117647 . /home/zeen/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( .",
            "url": "https://zeen1717.github.io/zeeeeen/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Notes . Lossy data can reduce data, but the original data cannot be recovered, but lossless data can, data compression is used to save space and transmission time. | The file types are gif, png, jpg, etc. | The work deployment in the terminal of windows and mac and wsl is different | Python Image Library (PIL) enables images to be worked with in python | Base64 can transfer image formats (jpg, png) into text assets such as html, css, etc. | Buffering is used to optimize input/output operations | numpy can simplify accessing and changing RGB values of pixels | Object oriented programming (OOP), which is required for most data structure classes. | . Questions . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | . Type cd and press Return to change directory to access files Type Is and press Return to list all files in the current directory. The pwd command tells you what directory you are currently in, etc. . What are the command you use in Windows terminal to access files? | . search in c drive . What are some of the major differences? | . the path when accessing files. wsl is not searching in the c drive . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | . The path determines where you will process the image, otherwise you will not find the file. . How does the meta data source and label relate to Unit 5 topics? | . Metadata is data that provides information about other data, not the content of the data, that is, the sass, theme, etc. mentioned in the fifth unit . Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . ipython is a command shell for interactive computing in many programming languages. Jupyter&#39;s architecture includes a front end (web or console) and a back end (kernels for various languages). The IPython console is all about Python and the terminal. pandas is an ipython library for working with datasets. . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # define the format of how to disply images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) happy_face = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Happy Face&quot;, &#39;file&#39;: &quot;download(1).jpg&quot;}]) image_display(happy_face) # display default images from image_data() default_images = image_data() image_display(default_images) . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Similarity: Binary is base2, hexadecimal is base 16 Difference:how bytes represented . Translate first 3 letters of your name to Base64. | . WmV1 . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | . Video loading page when watching youtube or watching TV . From your consumer experience, what effects have you experienced from buffering? | . Buffering makes me gradually lose patience, but it also temporarily distracts me from electronics. . How do these effects apply to images? | . In the buffer, the program will use some memory to process the image. . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | . It seems yes. . Describe Grey Scale algorithm in English or Pseudo code? | . Get the red, green and blue values of a pixel, convert these values to a single gray value, and replace the original red, green and blue values with the new gray values. . Describe scale image? What is before and after on pixels in three images? | . Scale image refers to resizing the percentage of the width and height of a digital image. . Is scale image a type of compression? If so, line it up with College Board terms described? | . Scale image is to make the two-dimensional aspect of the image larger and smaller, but compression is to make the capacity of the image smaller while retaining most of the main information. . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts # To optimize I/O operations from io import BytesIO # converting immages into textual assets import base64 # To simplify access and change to the RGB values of the pixels ad coverting pixels to grey scale import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Happy Face&quot;, &#39;file&#39;: &quot;download(1).jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . - meta data -- Happy Face Internet JPEG RGB Original size: (136, 132) Scaled size: (320, 310) -- original image -- . grey image - . . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL is an additional library for the python language that adds support for many image file formats | numpy is a library for the python programming language with a large number of advanced mathematical functions for manipulating arrays | base64 can encode small images into text encoding scheme | . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.2 | . . Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . I chose jpeg image files as more likely to result in lossy data compression, because then the creator can decide how much loss to introduce, in terms of file size and image quality,and I chose the png image file as the one that would result in more lossless compression, since it compresses and shrinks the image without any loss of quality. . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | . After importing numpy, convert image data from PIL to numpy array when defining image management, then convert image data to red scale, create red scale of image and average pixel values, and then use this function to display when printing . Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | . After the image is read, it is converted to grayscale and a threshold flag is set stating how many bits per pixel and the resolution in pixels Sorry, I&#39;m not sure how to do this. . Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://zeen1717.github.io/zeeeeen/2023/03/07/2.2.html",
            "relUrl": "/2023/03/07/2.2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Mcq Tri2final Testcorrection",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Test Correction n”, “- toc: true n”, “- comment: true” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [] } ], “metadata”: { “kernelspec”: { “display_name”: “base”, “language”: “python”, “name”: “python3” }, “language_info”: { “name”: “python”, “version”: “3.9.12” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “364a94d119261e0775b1b30a60056d37c36efcef8468b46b1878966affcf428e” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://zeen1717.github.io/zeeeeen/2023/03/06/MCQ-tri2final-testcorrection.html",
            "relUrl": "/2023/03/06/MCQ-tri2final-testcorrection.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "BigIdeaHacks",
            "content": "Hakcs . Big Idea 5.5 Legal and Ethical Concerns . When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. . Notes:Open source means that a Github project must be public, closed source means it can be private. The Open Source MIT License means this is open source, it is also possible to distribute the closed source version but requires credit, such as adding the author’s name in the comments. The open source GPL license means that the project is open source but the closed source version cannot be distributed. | . In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. . We can use the open source MIT license, Creative Commons zero-level open source resources, while complying with the license terms, we need to cite the source, have copyright awareness, infringement will make us pay unnecessary costs. | . Make a license for your personal (blog) and Team repositories for the CPT project. Be sure to have a license for both Team GitHub repositories (frontend/backend). Document license(s) you picked and why. FYI, frontend, since it is built on GitHub pages may come with a license and restrictions. Document in blog how team made license choice and process of update. . I used the open source MIT license as this allows me to freely use the code and make and distribute closed source versions | . BigIdea 5.6 Safe Computing . Describe PII you have seen on project in CompSci Principles. . Personal phone number, email address, street address. | . What are your feelings about PII and your personal exposure?’ . The exposure of PII will lead to the exposure of personal privacy information, and even the bank card is stolen, and the debt of tens of thousands of dollars on the card for no reason, etc. | . Describe good and bad passwords? What is another step that is used to assist in authentication. . A good password is stronger than a bad password because good passwords often use more complex things, such as complex patterns, symbols, numbers and letters alternated, etc. Another step for secondary identity is to send email verification | . Try to describe Symmetric and Asymmetric encryption. . Symmetric encryption uses only one key to encrypt or decrypt information, asymmetric cryptography uses a bunch of related keys, a public key and a private key, to prevent unauthorized access | . Provide an example of encryption we used in AWS deployment. . Customer code is not stored in CodeDeploy, using encryption at rest and encryption in transit, and encryption keys | . Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. . Email Phishing, Business Email Compromise, Voice Phishing, SMS Phishing, Spear Phishing. | .",
            "url": "https://zeen1717.github.io/zeeeeen/2023/02/08/APtechtalk.html",
            "relUrl": "/2023/02/08/APtechtalk.html",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Bias answers",
            "content": "Hacks 1 . Write summary/thoughts/conclusions from each of the exercises above. Focus on avoiding Bias in algorithms or code you write. . Computer Bias . Earlier we talked about beneficial and harmful effects of computing. Such conversation often lead to conversations on computer bias, particularly when bias creates a harmful effect. . As programmers, you now have the possibility of creating algorithms. It has been said, “Humans are error-prone and biased”. So, does that mean algorithms and the computers they run on are better? . No, while humans are fallible and biased, computers and algorithms can be more biased and fixed. | . Intentional or Purposeful bias . Google “What age groups use Facebook” vs “… TikTok”? What does the data say? Is there purposeful exclusion in these platforms? Is it harmful? Should it be corrected? Is it good business? . People who use facebook are mostly older people, and people who use tiktok should be teenagers or younger people | . Why do virtual assistants have female voices? Amazon, Alexa Google, Apple Siri. Was this purposeful? Is it harmful? Should it be corrected? Is it good business? . I think it’s because generally women’s voices are clearer, easier to hear, and gentler, so they adopt the virtual assistant as the default for women’s voices. | . Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple,Netflix, Google) Google’s big data algorithm will recommend suitable ads for you based on the web pages you browse and what you search for . As Pairs (5 minutes) Watch the video… HP computers are racist Come up with some thoughts on the video and be ready to discuss them as I call on you. Here are some ideas… Does the owner of the computer think this was intentional? If yes or no, justify you conclusion. How do you think this happened? Is this harmful? Was it intended to be harmful or exclude? Should it be corrected? What would you or should you do to produce a better outcome? . I think this is not intentional, but because the computer algorithm can not recognize the face of black people, so it creates the illusion that the computer is a racist phenomenon. This is harmful because this camera can not monitor the crime of black people. The source of the cause of bias in the code should be identified and solved or improved. | . Hacks 2 . CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? What kind of data could you capture at N@tM to make evening interesting? Perhaps use this data to impress Teachers during finals week. . Open online collaboration. One person makes an announcement and others divide up the work to solve problems or make comments.Del Norte crowdsourcing is, for example, posting announcements on canvas, or broadcasting announcements for students to share their opinions like food survey. Yes, we can ask questions to teachers and classmates on slack to solve the problems and improve the quality of the project when we do the project. | .",
            "url": "https://zeen1717.github.io/zeeeeen/2023/02/01/bias.html",
            "relUrl": "/2023/02/01/bias.html",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Description",
            "content": "First row: . Users input their age, skin type, allergies, etc., and output personalized suggestions based on skin conditions. This is to get skin care solutions for people&#39;s skin types by doing quiz. . Second row: . Two different code snippets will be provided, the first showing that the data is stored in the recognized list, and the second showing that it is displayed in the data accessed from the recognized list, and the name of the list is identified as SkinProductTypes, which will indicate that it will be stored In a list, and the data in this list represent the type of skin care products . Third row: . The code that will manage the complexity of the program will use lists, where the types of skin care products are stored. And without a list, I need to have multiple variables for each skin care product. This list brings together all the skin care products, so it is easier to get information about these skin care products, and adding other skin care products can be directly added to the list without creating new variables. . Fourth row: . I will show the program to be developed and have at least one parameter that affects the function of the process, and I will buy a book that identifies the process and role and how it can help the program . Fifth row: . The algorithm I developed will use sorting, selection and iteration and explain how it works . Sixth row: . I will describe two calls to the selected procedure, each passing different parameters, and the conditions tested and corresponding different results for each call to the procedure. .",
            "url": "https://zeen1717.github.io/zeeeeen/2023/01/28/description.html",
            "relUrl": "/2023/01/28/description.html",
            "date": " • Jan 28, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Reflection",
            "content": "5.1 Reflection . Come up with three of your own Beneficial and corresponding Harmful Effects of Computing | Benificial:It can be used in life to make people&#39;s life more convenient It can be used for scientific and technological development, allowing society to progress It can enable people to innovate their minds and broaden their horizons . Harmful:Some people will use it to do the work they are supposed to do, or they will use it to cheat, etc. Life becomes more convenient will make people become more lazy and slow-minded. The higher the level of technological innovation, the more it may be out of human control . Talk about dopamine issues above. Real? Parent conspiracy? Anything that is impacting your personal study and success in High School? | The above is indeed true. The secretion of dopamine can make us addicted to games and social media, leading to missed assignments and lower grades, which can have a great impact on our lives. We can play games and social media, but we can&#39;t get addicted to them, think about our aspirations and future, and keep working hard. . 5.2 Reflection . How does someone empower themself in a digital world? | In the digital world we can do what we want to do, across time and space, and we can have online classes during covid as if we were inside a classroom. So we can also learn through online classes, and we can also find information online to enrich our knowledge and experience . How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? | I can help my classmates in areas of expertise, guiding and helping them solve difficult problems. Learning on paper is also a form of learning, in that sometimes paper is rather faster and more effective, such as recording a quick reminder and doing math problems. I don&#39;t think so. Other places may have it, some may not have enough money to buy so many electronic devices, etc. .",
            "url": "https://zeen1717.github.io/zeeeeen/2023/01/24/BigIdea5.1&5.2.html",
            "relUrl": "/2023/01/24/BigIdea5.1&5.2.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Submmisions 3",
            "content": "Submmision 1 . Reporting Category Student College Borad Comments . Program Purpose and function | 1 | 1 | The video demonstrates input and output, the operation of the program and its functions, and is about a game of rock-paper-scissors. In the written response, describe the general purpose, which can be entertainment or decision making, and describe the function of the program demonstrated in the video, describing the input and output of the program | . Data Abstraction | 1 | 0 | This written response consists of two clearly identifiable program code segments and also describes what the data represented by the list contained in the list are potential options that the computer can choose as its input | . Managing Complexity | 0 | 0 | The response includes a program snippet but does not show a list that can be used to manage program complexity, college borad states that the response provides an explanation of how to write the program in different ways without a list | . Procedural Abstraction | 1 | 0 | The written response included two program code segments, and showed that the developed program was called, and described the role and benefits of the identification process, but the college board said that it did not specify how the program contributed to the overall program, only that it &quot;allowed Program executed smoothly | . Algorithm Implementation | 1 | 1 | The written response includes program code snippets for the algorithm developed by the student, sorting, selecting, and iterating, and details how to identify the details of the algorithm so that others can create it | . Testing | 1 | 1 | Describes the two invocations of the selected procedure that resulted in different code segments being executed, resulting in different results, describes the entity tested by each invocation of the procedure and identifies the result of each invocation | . Submmision 2 . Reporting Category Student College Borad Comments . Program Purpose and function | 1 | 1 | The video demonstrates input and output, the operation of the program and its functions, describes the general purpose of the program, helps users recognize new words and expand their vocabulary, and describes the function of the program demonstrated in the video, describes the input and output of the program | . Data Abstraction | 1 | 1 | The written response consists of two clearly identifiable program code segments and also describes the data represented by the list contained in the list | . Managing Complexity | 1 | 1 | The response includes a program snippet and shows how lists can be used to manage program complexity and explains what happens if the list is not used | . Procedural Abstraction | 1 | 1 | Included in the written response are two program code snippets, the student-developed program guessWords, which is shown calling this program, and describes the role and contribution of the recognition process | . Algorithm Implementation | 1 | 1 | The written response includes program code snippets for the student-developed algorithm guessWords, sorting, selecting, and iterating, and details how to identify details of the algorithm so that others can create it | . Testing | 1 | 1 | Describes two different calls to the selected procedure, resulting in different code segment executions, describes the conditions tested by each call to the procedure, and identifies the result of each call, satisfying the condition | . Submmision 3 . Reporting Category Student College Borad Comments . Program Purpose and function | | 1 | This video demonstrates the input and output, the operation of the program and its functions, is to provide the user with information about the states of the United States, describes the general purpose of the program, and describes the program functions demonstrated in the video, and describes the input and output of the program | . Data Abstraction | 1 | 0 | The written response consisted of two clearly identifiable program code segments that also described the data represented by the list contained in the list and some user information, but the college board believed that only the second code segment showed that the data was stored in the identified list , no code is shown to illustrate the data being used in the list | . Managing Complexity | 0 | 0 | Response includes a program snippet, but no display list can be used to manage program complexity, and no detailed explanation of what happens if this list is not used | . Procedural Abstraction | 0 | 0 | The written response included two program code segments, but he did not reveal the parameters, did not call the program, and did not describe the contribution of the identification process | . Algorithm Implementation | 1 | 0 | The written response includes program code snippets for the algorithm developed by the student, sorting, selection, and iteration, and details how to identify the working details of the algorithm so that others can create it, but the college board says it does not include iteration, and does not explain indexing The value is set based on the match and it doesn&#39;t say what value is set for each US state | . Testing | 0 | 0 | Describes two different calls to the selected procedure without passing different parameters, resulting in different code segment execution, describes the conditions tested by each call to the procedure, and identifies the result of each call, college board says that the response does not specify the results of two calls to the given procedure and there are no two calls to them | . Submmision 4 . Reporting Category Student College Borad Comments . Program Purpose and function | 1 | 1 | This video demonstrates the input and output of this program, one of which is user input by pressing &quot;a and d&quot; keys, the output is left and right movement. It demonstrates how the program works and what it does, describes the general purpose of the program, and describes the program&#39;s functionality as demonstrated in the video, and describes the program&#39;s input and output | . Data Abstraction | 1 | 1 | The written response consists of two clearly identifiable program code segments and also describes the data represented by the list contained within the list, indicating the type of fish and the amount of specific fish that will not be obtained. | . Managing Complexity | 1 | 1 | This response includes a program snippet, showing lists that can be used to manage program complexity, and a detailed explanation of how to write code in a reasonable way without using this list | . Procedural Abstraction | 1 | 1 | The written response included two program code snippets showing the calling programs and describing the function and contribution of the identification process | . Algorithm Implementation | 1 | 1 | The written response includes program code snippets for the algorithm developed by the student, sorting, selecting, and iterating, and details how to identify the working details of the algorithm so that others can create it, so the condition is satisfied | . Testing | 1 | 0 | The response describes two different calls to the selected procedure, passing different parameters, resulting in the execution of different code segments, describing the conditions tested by each call to the procedure, and identifying the result of each call, so the condition is met , but the college board thinks that it describes the code segment rather than the result of the call, and does not describe the specific parameters passed through the parameters | .",
            "url": "https://zeen1717.github.io/zeeeeen/2023/01/18/Submmisions3.html",
            "relUrl": "/2023/01/18/Submmisions3.html",
            "date": " • Jan 18, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Submmisions 2",
            "content": "Submmision 1 . Reporting Category Student College Borad Comments . Program Purpose and function | 0 | 0 | The video shows animal icons and questions as well as inputs and outputs, there is a description of the purpose, but the cemetery does not describe the problem solved by the program and demonstrates the functionality, describing the inputs and outputs of the program, but collegeborad believes that challenging the user&#39;s memory is not considered an interaction and this response does not describe the functionality shown in the video. | . Data Abstraction | 1 | 0 | Two program snippets are shown, describing the data contained in the list, representing making it shorter and more complex, but the college board believes that animallist is not used in any snippet | . Managing Complexity | 0 | 0 | It does not show that a list is used to manage the complexity of the program, and the code is not complex, so it does not meet the requirements. college borad also believes that the code is not complex and that &quot;the array allows you to store multiple variables, thus making it shorter and more complex.&quot; This sentence has the end of how it would be written differently without the list, I think they explained, but not complexity | . Procedural Abstraction | 0 | 0 | The response contains two program code segments, one in which the parameter guess has an effect on the function and is called, describing what the program does but not its contribution to the overall function of the program | . Algorithm Implementation | 0 | 0 | The program code segment contains sequencing, selection, and iteration, but there are no detailed steps at the end of how the identified algorithm works | . Testing | 1 | 1 | describes the two invocations of the selected program, but describes the conditions of the test for each invocation, and identifies the results of each invocation | . Submmision 2 . Reporting Category Student College Borad Comments . Program Purpose and function | 1 | 1 | The video demonstrates the operation of the program with inputs and outputs, describing the functions of the program, such as the user entering words to generate different poems, describing the inputs and outputs of the program | . Data Abstraction | 1 | 1 | Two program code segments are shown that describe the data contained in the list, nouns that must be located in certain specific positions in order for the poem to have logical meaning | . Managing Complexity | 1 | 1 | It shows the complexity of a list being used to manage a program and explains in detail how the code differs in the absence of a list | . Procedural Abstraction | 1 | 1 | The response contains two program code segments with several parameters that are called, have an impact on the function, and are called, describing the function of the program and describing its contribution to the overall function of the program | . Algorithm Implementation | 1 | 1 | This program snippet contains sequencing, selection, iteration, and a detailed step-by-step explanation of how the identified algorithm works | . Testing | 1 | 1 | describes the two calls of the selected program, describes the conditions tested for each call, and identifies the results of each call, all in great detail | . Submmision 3 . Reporting Category Student College Borad Comments . Program Purpose and function | 1 | 0 | The video demonstrates the operation of the program with input and output, describes the function of the program, the response describes the input and output, but college borad thinks the video describes the function of the program and not the purpose, but the decision rule says the purpose described actually refers to the function of the program, I don&#39;t quite understand | . Data Abstraction | 1 | 1 | It shows two program code segments describing the data contained in the list, the list management complexity, would be simpler and more concise | . Managing Complexity | 1 | 1 | It shows that a list is used to manage the complexity of the program and provides exactly what would happen if the list were not used | . Procedural Abstraction | 1 | 1 | The response contains two program code segments that describe the findwinner procedure being called, describe the function of the program, and describe its contribution to the overall function of the program, &quot;adding to the function of the program as it determines the false winner of the battle between the two Marvel characters&quot; | . Algorithm Implementation | 1 | 1 | The program snippet contains sequencing, selection, iteration, and explains in great detail how the algorithm works so that others can recreate it | . Testing | 1 | 1 | It describes the two invocations of the selected program, describes the conditions tested for each invocation, and identifies the result of each invocation. | . Submmision 4 . Reporting Category Student College Borad Comments . Program Purpose and function | 1 | 1 | The video demonstrates the operation of the program with inputs and outputs, describes the function of the program, and the response describes the inputs and outputs, so the requirements are met. | . Data Abstraction | 1 | 1 | It shows two program code segments describing the data contained in the list, representing all the words entered by the user | . Managing Complexity | 1 | 0 | I think it shows a list being used to manage the complexity of the program, and explains the complexity, and what happens without the list, but the college board believes that neither criterion is met because the list is not used to manage complexity, and the use of the list is only as a counter, and the response references the list wordlist as unidentified, so this part of the response is irrelevant. | . Procedural Abstraction | 1 | 1 | The response contains two program code segments that illustrate that the checkanswer procedure was called, describes the function of the program, and describes its contribution to the overall function of the program, so this requirement is satisfied | . Algorithm Implementation | 1 | 1 | The program snippet contains sequencing, selection, iteration, and explains in great detail how it works so that others can recreate it | . Testing | 1 | 0 | I think it describes the two calls to the selected program, describes the conditions tested for each call, and identifies the result of each call, but the college board argues that the response gives the conditions tested, but two different arguments lead to the execution of different code segments | .",
            "url": "https://zeen1717.github.io/zeeeeen/2023/01/12/Submissions2.html",
            "relUrl": "/2023/01/12/Submissions2.html",
            "date": " • Jan 12, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$VH4...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$cMC...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$ibk...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$kqY...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$OWP...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$VH4...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$cMC...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$RmT...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$kqY...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$OWP...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$VH4igcYUtg0Rpklk$1b121e7e0b4ef337ff2fb71fe5f8be092f623c57beb4bf9aaa2943c5affe92d7&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$cMCiaG0tAWajoBqZ$01891eb0666e800dafd4958eb6d4b59b8d71e3d1a24e4c75a4a8112aef75725c&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$RmTx3LOEUV1mPVGm$7740a229c5f097099a038c32b22cda732e9f738b180646d38f03e9bf82ee8935&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$kqYiMHXN1onY5WcT$aff5dfedde39aa728a12152d4d2f92fb83ef0406085e6438b5fc562037b29a7e&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$OWP7Wu9MSgLXSSPb$3aa8ebe23991e1f6ab142a79ff766a21615bda191b22ef2f45024240e9a80945&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$VH4igcYUtg0Rpklk$1b121e7e0b4ef337ff2fb71fe5f8be092f623c57beb4bf9aaa2943c5affe92d7&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$cMCiaG0tAWajoBqZ$01891eb0666e800dafd4958eb6d4b59b8d71e3d1a24e4c75a4a8112aef75725c&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$RmTx3LOEUV1mPVGm$7740a229c5f097099a038c32b22cda732e9f738b180646d38f03e9bf82ee8935&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$kqYiMHXN1onY5WcT$aff5dfedde39aa728a12152d4d2f92fb83ef0406085e6438b5fc562037b29a7e&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$OWP7Wu9MSgLXSSPb$3aa8ebe23991e1f6ab142a79ff766a21615bda191b22ef2f45024240e9a80945&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date class User: def _init_(self, name, age): self._name = name#denotes as private attributes self._age = age self._dob = dob def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) @property def year_of_graduation(self): return self._year_of_graduation # a setter function, allows name to be updated after initial object creation @year_of_graduation.setter def year_of_graduation(self, year): self._year_of_graduation = year_of_graduation @property def dateOfBirth(self): return self._dateOfBirth # a setter function, allows name to be updated after initial object creation @dateOfBirth.setter def dateOfBirth(self, dateOfBirth): self._dateOfBirth = dateOfBirth if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11)) print(u1) . TypeError Traceback (most recent call last) /home/zeen/vscode/zeeeeen/_notebooks/2023-01-10-PBL-model.ipynb Cell 7 in &lt;cell line: 31&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-01-10-PBL-model.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=27&#39;&gt;28&lt;/a&gt; self._dateOfBirth = dateOfBirth &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-01-10-PBL-model.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=30&#39;&gt;31&lt;/a&gt; if __name__ == &#34;__main__&#34;: &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-01-10-PBL-model.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=31&#39;&gt;32&lt;/a&gt; u1 = User(name=&#39;Thomas Edison&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11)) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2023-01-10-PBL-model.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=32&#39;&gt;33&lt;/a&gt; print(u1) TypeError: User() takes no arguments . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) @property def yog(self): return self._dob.year + 18 # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;yog&quot; : self.yog } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob}, yog = {self._yog}&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11), yog) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . Input In [25] u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11), yog) ^ SyntaxError: positional argument follows keyword argument .",
            "url": "https://zeen1717.github.io/zeeeeen/2023/01/10/PBL-model.html",
            "relUrl": "/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Submmisions",
            "content": "Submmision 1 . Reporting Category Student1 College Borad Comments . Program Purpose and function | 1 | 0 | This gets the score, contains the inputs and outputs, the program functions, the video shows the program running, demonstrates the functional inputs and outputs, and describes the overall purpose of the program. But in fact, after comparing, the purpose of this program is not clear, only the function of the program is described, the main program is not specific | . Data Abstraction | 1 | 1 | This gains points because it contains two program snippets and it is very clear that the element is not a single-element list, the data is stored in the sideindex | . Managing Complexity | 1 | 1 | Shows the complexity that is used to manage the program by putting all the categories in one place, the written response has named the selected list, but the University Council believes that the list is not necessary for the program and does not manage the complexity, the code is inefficient and unnecessary. | . Procedural Abstraction | 1 | 1 | Contains two program code segments showing the procedure and its application, with a description of the procedure, and a description of its contribution to the overall function of the program | . Algorithm Implementation | 1 | 1 | The code snippet shows sorting, selection and iteration, with detailed step-by-step explanations of how the algorithm works | . Testing | 1 | 1 | Two calls are shown, and the plan is consistent, with each call passing different parameters and a different code segment executed in the algorithm, describing the conditions of each call | . Submmision 2 . Reporting Category Student2 College Borad Comments . Program Purpose and function | 1 | 1 | The purpose is clearly described, the function of the program, and the video has a demonstration showing the program in action. | . Data Abstraction | 1 | 1 | All the requirements of the second line are perfectly met, showing two program code segments | . Managing Complexity | 1 | 1 | It demonstrates how to manage complexity and discusses | . Procedural Abstraction | 0 | 1 | Didn&#39;t get a score because there is no return type or parameter here, but the University Council score here is 1 because I misread it | . Algorithm Implementation | 1 | 1 | Includes sorting, selection and iteration, describing in detail how the algorithm works and the steps | . Testing | 1 | 1 | The procedure contains two calls, and both are very detailed, satisfying all the requirements of the sixth line | .",
            "url": "https://zeen1717.github.io/zeeeeen/2023/01/04/Submmisions.html",
            "relUrl": "/2023/01/04/Submmisions.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "U3 S16",
            "content": "Notes . Simulation: Simple abstraction of complex natural phenomena . Simulations need to model complex situations in a simpler way . Simulation is not limited by the time, money and safety of real life . There is no such thing as &quot;true random&quot; in the real world . Pseudo-random number generators can simulate flaws that always exist in the real world and save resources, testing multiple possibilities . Additional details can be removed to improve simulation functionality . 4 Simulation Techniques: . Procedure and iteration . Flowcharts . Conditionals . Removing details; like accidents or weather . Hacks . MCs and explanation . Sorry! I don&#39;t know how to create a table. . C | A and B can use a pseudo-random number generator while simulating. . B | The other planes are least likely to be removed from the simulation as it needs to be repeated many times in the simulation and conditions may vary for each plane, more planes can make the simulation more rigorous. . C | Both experiments and simulations need to consider multiple situations. Simulation can save a lot of resources and time, but experiment can&#39;t. Some details can be deleted in simulation to improve the function of simulation. . A | In order to ensure the safety of customers, simulation is the best method for new car testing, if the experiment will lose a lot of resources and time. . A | The greenhouse effect will have a huge impact on the entire planet, so simulation is better than experiment. . B | In order to find the average score from the final exam, calculation is the best option, this teacher can calculate the average score by calculating. . WHAT QUESTIONS 3: What is not a reason to use a pseudo-random number generator when making a simulation? . A: To mock imperfections from the real world . B: To save resources . C: To make the simulation more accurate . 4: Which of the following is the least likely factor to be removed from a flight(air traffic) simulation for functionality? . A: Weather . B: Other aircraft . C: Imperfections on aircraft . Experiment/Calculation or Simulation . 5: What is not (usually) a difference between a experiment and a simulation? . A: Resources and time needed . B: Factors considered . C: Situation considered . For each situation answer: Would it make more sense to use a simulation or a experiment/calculation? . 6: A car company needs to know how safe it&#39;s customers will be if it&#39;s new car crashes . A: Simulation . B: Experiment/calculation . 7: A environmental group wants an accurate guess on the impact the greenhouse effect will have on the environment . A: Simulation . B: Experiment/calculation . 9: A teacher want&#39;s to find the average score from a final . A: Simulation . B: Experiment/calculation .",
            "url": "https://zeen1717.github.io/zeeeeen/2022/12/13/U3-S16.html",
            "relUrl": "/2022/12/13/U3-S16.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "U3 S14-15",
            "content": "Reflection . When the process is too long to view, use the documentation to explain what the process does . Randomization is everywhere in our lives . RANDOM(a, b) generates and returns a random integer from a to b . The random library must be imported to use it&#39;s function . random.choice can pick a random element from a list . random.shuffle can rearrange the elements of a list at random . You can use the ladder function in randrange and not include the maximum value . randint(start,stop) claims a random number from a range, randrange(start,stop,step) . generates a random number in a range by setting increments . Multiple Choice . What does the random(a,b) function generate? . A. A random integer from a to be exclusive . ==B. A random integer from a to b inclusive.== . C. A random word from variable a to variable b exclusive. . D. A random word from variable a to variable b inclusive. . What is x, y, and z in random.randrange(x, y, z)? . ==A. x = start, y = stop, z = step== . B. x = start, y = step, z = stop . C. x = stop, y = start, z = step . D. x = step, y = start, z = stop . Which of the following is NOT part of the random library? . ==A. random.item== . B. random.random . C. random.shuffle . D. random.randint . Short Answer Question . What is the advantage of using libraries? | Using libraries and importing allows us to use the code inside to achieve our goals more quickly and easily. Libraries simplify complex processes and contain procedures used in creating novel programs. . Write a thorough documentation of the following code. | import random names_string = input(&quot;Give me everybody&#39;s names, seperated by a comma.&quot;) names = names_string.split(&quot;,&quot;) num_items = len(names) random_choice = random.randint(0, num_items - 1) person_who_will_pay = names[random_choice] print(f&quot;{person_who_will_pay} is going to buy the meal today!&quot;) . Eric is going to buy the meal today! . Documentation: First import the random library to use the code inside the library, these codes allow us to eliminate the need to define complex code to use, and then import the user to use the names in the library, the names are separated by splits using commas, each name will be by the corresponding index, then use random.randint to randomly select an index and output the names. . Coding Challenges! . REQUIRED: Create programs in python to complete the two task&lt;/p&gt; . Create a program to pick five random names from a list of at least 15 names | import random # import random library nameList = [&quot;Eric&quot;,&quot;Lily&quot;,&quot;Jack&quot;,&quot;Kerry&quot;,&quot;RJ&quot;,&quot;John&quot;,&quot;Ashley&quot;,&quot;Tony&quot;,&quot;Scott&quot;,&quot;Tim&quot;,&quot;Petter&quot;,&quot;Amy&quot;,&quot;Potter&quot;,&quot;Alle&quot;,&quot;Golf&quot;] # create a nameList to be used # Print 5 random names from nameList i = 1 while i &lt;= 5: randomNames = random.choice(nameList) # use random function from random library print(randomNames) i += 1 . Ashley Petter RJ Alle Tim . Create a program to simulate a dice game where each player rolls two fair dice (6 sides); the player with the greater sum wins | import random def rollDice(): # define how to roll dices firstRoll = random.randint(1,6) secondRoll = random.randint(1,6) score = firstRoll + secondRoll return score # print their scores playerAscore = rollDice() print(&quot;PlayerA got&quot;,playerAscore) playerBscore = rollDice() print(&quot;PlayerB got&quot;,playerBscore) # compare scoreA with scoreB if playerAscore &gt; playerBscore: print(&quot;playerA wins&quot;) if playerAscore &lt; playerBscore: print(&quot;playerB wins&quot;) if playerAscore == playerBscore: print(&quot;Both them tied with&quot;,playerAscore) . PlayerA got 9 PlayerB got 5 playerA wins .",
            "url": "https://zeen1717.github.io/zeeeeen/2022/12/12/U3-S14-15.html",
            "relUrl": "/2022/12/12/U3-S14-15.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Notes",
            "content": "U3 S12-13 Homework . toc: true | comments: true | . Problem 1: This problem involves parameters Qais is writing code to calculate formulas from his math class. He&#39;s currently working on a procedure to calculate average speed, based on this formula: . Average speed= . Total Time/Total Distance​ . Highlight which of these is the best procedure for calculating and displaying average speed. PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) } Problem 2: Procedures with return values James Hunter is looking through his classmate&#39;s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion) . { moreEnergy ← CONCAT(myEmotion, &quot;!!!&quot;) . moreVolume ← UPPER(moreEnergy) . RETURN moreVolume } . That procedure manipulates strings using two built-in procedures, CONCAT for concatenating two strings together, and UPPER for converting a string to uppercase. . James Hunter then sees this line of code: . heightenEmotions(&quot;im mad&quot;) . After that line of code runs, will nothing be displayed? . True . False . Problem 3: Procedures with return values Bubz is writing a program to calculate the carbon footprint of his activities. The procedure calcFlightFootprint calculates the pounds of carbon dioxide produced per passenger in a flight that covers a given number of miles and seats a given number of passengers. . PROCEDURE calcFlightFootprint(numMiles, numPassengers) { CO2_PER_MILE ← 53.29 . carbonPerFlight ← numMiles * CO2_PER_MILE . carbonPerPassenger ← carbonPerFlight / numPassengers . RETURN carbonPerPassenger . } . Bubz wants to use that procedure to calculate the total footprint for his two upcoming flights: LA to NY: 2,451 miles and 118 passengers NY to London: 3,442 miles and 252 passengers . Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) . totalFootprint ← calcFlightFootprint(2451, 118 + 3442, 252) . totalFootprint ← calcFlightFootprint((2451, 118) + (3442, 252)) . laNyCarbon ← calcFlightFootprint(2451, 118) nyLondonCarbon ← calcFlightFootprint(3442, 252) totalFootprint ← laNyCarbon + nyLondonCarbon | &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; .",
            "url": "https://zeen1717.github.io/zeeeeen/2022/12/08/U3-S12-13.html",
            "relUrl": "/2022/12/08/U3-S12-13.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "U3 S8 and S10",
            "content": "Vocabulary . Iteration: refers to the repetition of processes in an instruction | for loop :The command is repeated a certain number of times | while loop: the instruction is repeated until the requirement is reached | Initialization: starting value of variable. | Lists: Sets in iterable data | Nested lists: several similar arrays of data grouped together | . Notes . For loop repeats a function a certain number of times | The while loop is used to repeat a piece of code a certain number of times until the condition is met. | The while loop is very similar to the if condition, except that while is executed continuously until it is no longer true, while if is executed only once. | List index starts at 0 in the list | append adds an element at the end, remove removes it at the index, and pop removes the last item. | Exercise#1 . Task Reverse a list utilizing features of lists and iteration Hint: Use two parameters with the range function . list = [1, 2, 3, 4, 5] # Print this in reverse order for number in range(5, 0, -1): print(number) . 5 4 3 2 1 . Exercise #2 . Task Similar to insertion sort, this algorithm takes an unsorted array and returns a sorted array Unlike insertion sort where you iterate through the each element and move the smaller elements to the front, this algorithm starts at the beginning and swaps the position of every element in the array . Expected Output: The sorted array from 1-10 . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] # Sort this array using bubble sort def BubbleSort(list) : length = len(list) for i in range(length): for a in range(0, length-i-1): if list[a] &gt; list[a+1]: tem = list [a + 1] list [a + 1] = list [a] list [a] = tem if __name__ == &quot;__main__&quot;: BubbleSort(list) print (&quot;Sorted Array:&quot;) for i in range(len(list)): print(&quot;%d&quot; % list[i], end=&quot; &quot;) . Sorted Array: 0 1 2 3 4 5 6 7 8 9 . . A while loop loops over an interval until a condition is met, a for loop iterates over an iterable object and lasts a certain amount of time. . . Use a for loop to iterate through the list until the user inputs quit .",
            "url": "https://zeen1717.github.io/zeeeeen/2022/12/07/U3-S8-10.html",
            "relUrl": "/2022/12/07/U3-S8-10.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "U3 S9 and S11",
            "content": "Notes . If clauses are separated or have one if clause inside another if clause is possible to be different | Boolean values can be expressed in different ways to express the same result | . Hacks . Make a binary search tree of different the list [1,2,3,4,6,9,11,69] . | Explain thorughly how to find the number 69 in the list above (use key words) . | Make a diagram explaining how you found the list (not tree, include equation) . | Put this list of strings in a order that can be used for binary search [“store”,”Market”,”Walmart”,Target”,”Ralphs”] . | Explain why Binary Search is more efficient than Sequential Search . | [64,36,16,11,9] Explain which number you are finding, how many check it would take, and make a binary search tree . |",
            "url": "https://zeen1717.github.io/zeeeeen/2022/12/06/U3-S9-11.html",
            "relUrl": "/2022/12/06/U3-S9-11.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "U3 S5-6",
            "content": "Homework . toc: true | badges: true | comments: true | categories: [Week 13] | . Notes . In the Boolean value, Ture is 1 and False is 0. | &quot;==&quot; is an alternative to equal to, since &quot;=&quot; is reserved for value assignment | The relational operators come first and the logical operators come second, in the order of not, and, or | In conditional, The true or false statement is a Boolean expression | Flow Chart of a Nested Conditional Statement: in conditonal 1, &quot;no&quot; goes to statement, &quot;yes&quot; goes to condition 2. Condition 2 is the same | Homework/Hacks . our homework we have decided for a decimal number to binary converter. You must use conditional statements within your code and have a input box for where the decimal number will go. This will give you a 2.7 out of 3 and you may add anything else to the code to get above a 2.7. . Below is an example of decimal number to binary converter which you can use as a starting template. . def DecimalToBinary(num): strs = &quot;&quot; while num: # if (num &amp; 1) = 1 if (num &amp; 1): strs += &quot;1&quot; # if (num &amp; 1) = 0 else: strs += &quot;0&quot; # right shift by 1 num &gt;&gt;= 1 return strs # function to reverse the string def reverse(strs): print(strs[::-1]) # Driver Code num = 67 print(&quot;Binary of num 67 is:&quot;, end=&quot; &quot;) reverse(DecimalToBinary(num)) . Binary of num 67 is: 1000011 . def DecimalToBinary(num): if num &gt; 0 : DecimalToBinary(int(num / 2)) print(num % 2, end=&#39;&#39;) num = int(input(&quot;Enter a decimal number n&quot;)) DecimalToBinary(num) . 1100010 .",
            "url": "https://zeen1717.github.io/zeeeeen/2022/12/01/Group3.html",
            "relUrl": "/2022/12/01/Group3.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Homework",
            "content": "Notes . Homework/Hacks . our homework we have decided for a decimal number to binary converter. You must use conditional statements within your code and have a input box for where the decimal number will go. This will give you a 2.7 out of 3 and you may add anything else to the code to get above a 2.7. . Below is an example of decimal number to binary converter which you can use as a starting template. . def DecimalToBinary(num): strs = &quot;&quot; while num: # if (num &amp; 1) = 1 if (num &amp; 1): strs += &quot;1&quot; # if (num &amp; 1) = 0 else: strs += &quot;0&quot; # right shift by 1 num &gt;&gt;= 1 return strs # function to reverse the string def reverse(strs): print(strs[::-1]) # Driver Code num = 67 print(&quot;Binary of num 67 is:&quot;, end=&quot; &quot;) reverse(DecimalToBinary(num)) .",
            "url": "https://zeen1717.github.io/zeeeeen/week%2013/2022/11/30/Group3.html",
            "relUrl": "/week%2013/2022/11/30/Group3.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "U3 S3-4",
            "content": "Notes . the symbol for modulus is %. | An index is a number that represents a position. | The pseudocode is a program written in common language. | substring = string[start:end] | 3.3 Expressions(Show video 1 and 3) . Vocab: fill in the blanks . the symbol for exponent is * the symbol for addition is + the symbol for subtraction is - the symbol for multiplication is __ the symbol for division is / the symbol for modulus is %__ an algorithm is basic . Sequencing Practice: the code below does not follow the intended steps below. change the code so that it does so. . divide value1 by 10(value1 = 5) | multiply 2 from the result of the step 1 | subtract 4 from the result of the step 2 | print the result of step 3 | value1 = 5 value2 = value1 / 10 #step 1 value3 = value2 * 2 #step 2 value4 = value3 - 4 #step 3 print(value4) . -3.0 . Selection/Iteration Practice: Create a function to print ONLY the numbers of numlist that are divisble by 3. Hint: use the MOD operator (a % b) to find the remainder when a is divided by b. . numlist = &quot;3&quot;,&quot;4&quot;,&quot;9&quot;,&quot;76&quot;,&quot;891&quot; for number in numlist: if int(number) %3==0 : print( number + &quot; is divisible by 3&quot;) continue else: continue . 3 is divisible by 3 9 is divisible by 3 891 is divisible by 3 . Homework/Binary Adaptation: Create a python function that will convert a decimal number 1-255 to binary using mathematical operations and powers of 2. Challenge: add frontend with javascript or html. . def convert(decimal): if decimal &gt; 0 : convert(int(decimal/2)) print(decimal % 2, end=&#39;&#39;) decimal = int(input(&quot;Enter a decimal number n&quot;)) convert(decimal) . 1111000 . 3.4 Strings(Show video 1) . Vocab: fill in the blanks using the video . Index is a number representing a position, like a character&#39;s position in a string or a string&#39;s position in a list. Concatenation is the operation of joining two strings together__ Length is the count of all its characters except the null character &quot;0&quot; A substring is _a subset or part of another string, or it is a contiguous sequence of characters within a string. . What is psuedocode? . Pseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts. . Can you think of some benefits of using pseudocode prior to writing out the actual code? . Choose an everyday activity | Imagine that you are providing instructions for this activity to a person who has never done it before | Challenge someone to do the steps you wrote out | Ex. Brushing Teeth . Pick up your toothbrush | Rinse toothbrush | Pick up toothpaste | Place toothpaste on the toothbrush | Rinse toothbrush again | Brush teeth in a circular motion | Spit | Wash mouth | Rinse toothbrush | You have brushed your teeth! | Substring/Length Practice: change the print functions to print &quot;hello&quot;, &quot;bye&quot;, and the string length . #the substring will have the characters including the index &quot;start&quot; to the character BEFORE the index &quot;end&quot; #len(string) will print the length of string string = &quot;hellobye&quot; print(string[0:5]) print(string[5:8]) print(string[0:8]) . hello bye hellobye . Concatenation Practice: combine string1 and string2 to make string3, then print string3. . string1 = &quot;computer&quot; string2 = &quot;science&quot; string3 = string1 + string2 print(string3) . computerscience . Homework/List Adaptation: create a function that prints the name of each string in the list and the string&#39;s length. Challenge: add frontend with javascript or html. . names = [&quot;jaden&quot;,&quot;max&quot;,&quot;dylan&quot;,&quot;orlando&quot;] def length(list): for name in names : print(name + str(len(name))) length(names) . jaden5 max3 dylan5 orlando7 . Stuck? . Check out what we did. | . Have any questions? . Ask us if you have any questions! | .",
            "url": "https://zeen1717.github.io/zeeeeen/week-13/big-idea-3/2022/11/29/Group2.html",
            "relUrl": "/week-13/big-idea-3/2022/11/29/Group2.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "U3 S1-2",
            "content": "Notes . Strings must be enclosed in quotation marks and lists must be enclosed in square brackets. We can swap variables by using temporary variables. . Assign a variable . using var (variable name) = (value) | using const (variable name) = (value) | using let (variable name) = (value) | Boolean is another key point for the use of variables, Boolean is True and False . 2 type of data are . string which is just letters that form words | list containing multiple data points， Connects to data abstraction where data points can be pulled from lists | Individual elements can be called, separated and organized using for loops. . Challenge . The list given contains multiple numbers with different values. There are also 2 variables that define the minimum and maximum valid values. Given these variables, output the values that do not fit into the valid range as well as their index values. . data = [104, 101, 4, 105, 308, 103, 5, 107, 100, 306, 106, 102, 108] # list of the different numerical values min_valid = 100 # minimum value max_valid = 200 # maximum value numbers = data for number in numbers : if number &gt; 200 or number &lt; 100 : print(number) . 4 308 5 306 . 9 306 6 5 4 308 2 4 . Homework/Hacks . The list given contains 4 album names - Welcome to my Nightmare, Bad Company, Nightflight, More Mayhem - and each album contains at least 4 songs within another list. Given this, write a block of code that enables users to input in integer values that correspond to the albums and songs - Welcome to my Nightmare is 1, Bad Company is 2, etc. - Then, a sentence is outputted that says Playing ___ based on which song was chosen using the numbers inputted by the user that corresponds to each song. . albums = [ (&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, # First album list [ (1, &quot;Welcome to my Nightmare&quot;), (2, &quot;Devil&#39;s Food&quot;), (3, &quot;The Black Widow&quot;), (4, &quot;Some Folks&quot;), (5, &quot;Only Women Bleed&quot;), ] ), (&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974, # Second album list [ (1, &quot;Can&#39;t Get Enough&quot;), (2, &quot;Rock Steady&quot;), (3, &quot;Ready for Love&quot;), (4, &quot;Don&#39;t Let Me Down&quot;), (5, &quot;Bad Company&quot;), (6, &quot;The Way I Choose&quot;), (7, &quot;Movin&#39; On&quot;), (8, &quot;Seagull&quot;), ] ), (&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981, [ (1, &quot;I Turned to Stone&quot;), (2, &quot;Keeping a Rendezvous&quot;), (3, &quot;Reaper of the Glory&quot;), (4, &quot;She Used Me Up&quot;), ] ), (&quot;More Mayhem&quot;, &quot;Imelda May&quot;, 2011, [ (1, &quot;Pulling the Rug&quot;), (2, &quot;Psycho&quot;), (3, &quot;Mayhem&quot;), (4, &quot;Kentish Town Waltz&quot;), ] ) ] a1 = input(&quot;enter number of albums list&quot;) a2 = input(&quot;enter number of songs list&quot;) print (&quot;Playing&quot; + albums[int(a1) - 1][3][int(a2) - 1][1]) . PlayingRock Steady . 1 1 Playing &quot;Welcome to my Nightmare&quot; 2 2 Playing &quot;Rock Steady&quot; .",
            "url": "https://zeen1717.github.io/zeeeeen/jupyter/week%2013/2022/11/28/Group1.html",
            "relUrl": "/jupyter/week%2013/2022/11/28/Group1.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "correction",
            "content": "Final Test Correction . 1 . The initial 2 is multiplied three times by 5, after the first 2 is multiplied by 5 and the resulting 10 is multiplied by the next 5. . 2 . The dineouthelper team should provide information about which food allergies and dietary restrictions are available at the different restaurants that live near Alejandra, as it is part of the application itself, and which restaurants they have visited are offered by alejandra . 3 . The values of j and k should be between 1 and length, because they are valid only when j and k are valid list indexes . 4 . It should be compared with all subsequent elements, because the title says if it contains any duplicate values. Show ture . 5 . The c option has a positive value and the procedure returns true as expected . 6 . Open protocols do not keep all transmitted data secure, they only provide a way to standardize transmission . 7 . The Internet is not a data stream, so it is accessed through the network that becomes the internet . 8 . Binary sequences can represent strings, colors, audio recordings . 9 . Age can be expressed as a number, boolean can only indicate true or false . 10 . The isopen variable should be boolean for true or and false . 11 . f is the index 3 character at index 2 in the wordlist, so it should be h, which is the character at index 2 of myword . 12 . yourlist is assigned to my list, so it should be [10, 30, 50, 70] . 13 . It should be one less loop iteration, so it is 15 .",
            "url": "https://zeen1717.github.io/zeeeeen/correction",
            "relUrl": "/correction",
            "date": " • Nov 10, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Hello to Python",
            "content": "Hello, World! . These examples show the basic language structures and constructs of Python using print and input commands (aka anatomy). . Print command using Static Text which performs output . The classic introduction to a programming language is to output a &quot;Hello, World!&quot; message. In Python, this is a print statement. . The command or function is print() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the print command. | The print command outputs the parameter to the terminal, as you see it in this Jupyter document | Output in Jupyter Notebook is below the code cell. Output will vary depending on tools and development intentions. Python print typically outputs to a terminal, we will see that when students start using Visual Studio Code. | . print(&quot;Hello World!&quot;) . Dynamic example showing variables, input and output . This second example is a sequence of code, two or more lines forms a sequence. This example takes input from the user and stores the input into a variable called msg (short for message), then outputs the msg to terminal. - This example is Dynamic as the input and output can change each time the code is run. . A variable &quot;msg&quot; is part of both statement The variable &quot;msg&quot; is used to capture the input command | The variable &quot;msg&quot; is then used as a parameter to print command, causing input to be output to terminal, or in Jupyter Notebook below the code cell. | . | The &quot;input&quot; command activates the jupyter notebook input box, which obtains input from the user (try it!) the &quot;msg&quot; variable is the dynamic result of the input command | . | The print command outputs the &quot;msg&quot; variable captured in the input statement note, msg is a parameter to the print function | . | Input and Output in Jupyter Notebook Input is NOT in line with Output, this is a little annoyance and requires familiarity. Input and Output will vary depending on tools and development intentions. Python print typically obtains input and outputs to a terminal, students will see that when they run Python programs using Visual Studio Code. | . msg = input(&quot;Enter a greeting: &quot;) print(msg) . Building a Function . This example adds to the basics of the Python anatomy, a function. Input, output, and grouping commands in functions is the key to most programming languages. This example simulates a free response answer to a question. . The &quot;def question_and_answer(prompt)&quot; now contains multiple indented commands, the commands print and input were learned previously. | Grouping a sequence of commands, often used repeatedly, is called procedural abstraction. | Procedure, Function, def are all synonyms in the Python language. | The &quot;def&quot; is a key word in Python that defines a function. Using this keyword defines a group of commands, but does not run them initially. | The name of the function in this example is &quot;question_and_answer&quot;. In essence, we are defining our own command within the Python language. | The three &quot;question_and_answer&quot; commands that follow the function and indented commands allow this function to be run. | This code of the function is then run multiple times, each command line providing a unique &quot;prompt&quot; as a result of the literal parameter passed to the function. | The function takes a parameter called &quot;prompt&quot;, which is a message output to the user to describe the input requested. | String concatenation &quot;+&quot; prefixes the prompt with the literal message &quot;Question: &quot;. | The &quot;msg&quot; variable is captured as a result of the jupyter notebook input supplied by the user | The input &quot;msg&quot; is output back to the user with &quot;Answer: &quot; concatenated to the front. | . def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) question_and_answer(&quot;Name the Python output command mentioned in this lesson?&quot;) question_and_answer(&quot;If you see many lines of code in order, what would College Board call it?&quot;) question_and_answer(&quot;Describe a keyword used in Python to define a function?&quot;) . Imports, Selection, and Logical Expressions . In Python anatomy of you will be importing libraries and functions. This is code that is developed by others. In this example we are importing from a library called &quot;os&quot;, this library extracts properties from the operating system of your existing system. Additionally, this example uses the custom function defined earlier in the Jupyter document. Python and Jupyter docs requires you to reference imports and definitions above the referencing line of code. . import os, sys obtain functions and variables from running environment | print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable + &quot; on &quot; + sys.platform + &quot;!&quot;), is a concatenated statement that outputs properties from the import | . Next, this example defines a new function &quot;question_with_response&quot;, this function returns a value input by the user. This allows programmer to evaluate the response. The purpose of obtaining the return value is to evaluate if correct response was given to the question. . response from &quot;question_with_response&quot; is captured in a variable called &quot;rsp&quot; return command in function returns msg input by user | assignment to &quot;rsp&quot; is allowed a function is returning a value, names do not need to match (but could) | . | if command is next command in sequence after &quot;rsp&quot; assignment this command contains an expression, rsp == &quot;import&quot; which compare what is typed to the string literal answer | an if expression is evaluated for true or false | true takes branch of code directly under if | false takes branch of code directly under else command | . | . The grand finally of this example is calculating the right/total. . question = 3 is defined as number of questions | correct = 0 is defined as running score | correct += 1 is the way to add one to the score, this code is placed in sequence under correct expression evaluation | since question and correct are numbers, versus strings, to place them in concatenation in print statements you must inclose them in Python function str() which turns number into string. | final print statement is concatenated and formatted to give user and right over wrong | . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hacks . Test running a Python file directly . From python directory run quiz.py in VS Code, this will show workflow of Input and Output in terminal | . Build your own Jupyter Notebook meeting these College Board and CTE competencies . Build your own quiz, including my questions and show outputs | Create both Markdown for description and Code for execution | Structure your Python code with comments &quot;#&quot; to complement Markdown descriptions | . Additional requirements . Build your quiz so that it captures the key Vocabulary from this Jupyter document | Calculate the percentage of your quiz | Review College Board Big Idea outline, see if you can reference locations in Markdown that support vocabulary | . Extra credit, Advanced . Do you see repeating pattern of code? Try to implement solution to avoid the repeating pattern (hint: list and iteration) | .",
            "url": "https://zeen1717.github.io/zeeeeen/collegeboard/python",
            "relUrl": "/collegeboard/python",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Hello to Badminton",
            "content": "Definition . Badminton is an indoor sport of hitting a small ball made of feathers and cork with a long-handled net racket across a net. . Preparation! . Here are the things we need: . shuttlecock(Bird/Birdie) | badminton racket | two persons | empty space | . Steps . 1.To play badminton you first need to have the correct grip. First, use the thumb and index finger to pinch the two wide sides of the handle, the tiger’s mouth is aligned with the side edge, and the other three fingers follow the trend and stick to the wide side of the index finger in turn to form a grip. . . 2.Always hit the center of the ball. As a novice, I suggest that you should hit the center of the round rubber ball head every time, this will improve your accuracy and success rate without missing the ball . . 3.Hit the ball with the highest point centered on you. Whether it’s serving or catching, hitting the ball at the highest point is the best way to control where it falls, and don’t wait until the ball is getting close to you before hitting it, otherwise the ball will lose momentum and height. . . 4.Hit the ball to the bottom line. It takes precision and power to hit the ball to the back line, which can make your opponent have to back off and take a lot of effort to get your ball back. If you’re not sure where to hit the next shot, and there’s a lot of space in the backcourt, go there. In the beginning, aim the ball a little bit ahead of the baseline so you won’t hit the ball if it goes beyond the baseline. . . 5.Always return to the center of the field. No matter what the situation is, you should return to the center of the court after serving and receiving the ball, so that you can deal with emergencies at the first time, and prevent the opponent from using the distance difference to prevent us from receiving the ball and then winning. . . Hacks . Test running a Python file directly . From python directory run quiz.py in VS Code, this will show workflow of Input and Output in terminal | . Build your own Jupyter Notebook meeting these College Board and CTE competencies . Build your own quiz, including my questions and show outputs | Create both Markdown for description and Code for execution | Structure your Python code with comments “#” to complement Markdown descriptions | . Additional requirements . Build your quiz so that it captures the key Vocabulary from this Jupyter document | Calculate the percentage of your quiz | Review College Board Big Idea outline, see if you can reference locations in Markdown that support vocabulary | . Extra credit, Advanced . Do you see repeating pattern of code? Try to implement solution to avoid the repeating pattern (hint: list and iteration) | .",
            "url": "https://zeen1717.github.io/zeeeeen/badminton",
            "relUrl": "/badminton",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Python Web API Endpoints using Jokes",
            "content": "Model for API . We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. . This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. . jokes_data contains a list of dictionary records containing joke and reactions:haha or boohoo - joke_list contains collection of jokes we will put into jokes_data | . | Next comes some functions to interact with our jokes . def initJokes(): initializes jokes_data | def getJokes(): returns the complete list of jokes | def getJoke(): returns a single joke from our list | ... many more function can be examined by reading comments below ... | . | . import random jokes_data = [] joke_list = [ &quot;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will &quot; &quot;frustrate them for a lifetime.&quot;, &quot;Q: Why did I divide sin by tan? A: Just cos.&quot;, &quot;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&quot;, &quot;Enter any 11-digit prime number to continue.&quot;, &quot;If at first you don&#39;t succeed; call it version 1.0.&quot;, &quot;Java programmers are some of the most materialistic people I know, very object-oriented&quot;, &quot;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just &quot; &quot;1 byte. And then everything crashed.&quot;, &quot;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&quot;, &quot;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&quot;, &quot;Q: What’s a aliens favorite computer key? A: the space bar!&quot;, &quot;There are 10 types of people in the world: those who understand binary, and those who don’t.&quot;, &quot;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&quot;, &quot;Computers make very fast, very accurate mistakes.&quot;, &quot;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&quot;, &quot;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&quot;, &quot;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&quot;, &quot;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&quot;, &#39;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#39; ] # Initialize jokes def initJokes(): # setup jokes into a dictionary with id, joke, haha, boohoo item_id = 0 for item in joke_list: jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) item_id += 1 # prime some haha responses for i in range(200): id = getRandomJoke()[&#39;id&#39;] addJokeHaHa(id) # prime some haha responses for i in range(50): id = getRandomJoke()[&#39;id&#39;] addJokeBooHoo(id) # Return all jokes from jokes_data def getJokes(): return(jokes_data) # Joke getter def getJoke(id): return(jokes_data[id]) # Return random joke from jokes_data def getRandomJoke(): return(random.choice(jokes_data)) # Liked joke def favoriteJoke(): best = 0 bestID = -1 for joke in getJokes(): if joke[&#39;haha&#39;] &gt; best: best = joke[&#39;haha&#39;] bestID = joke[&#39;id&#39;] return jokes_data[bestID] # Jeered joke def jeeredJoke(): worst = 0 worstID = -1 for joke in getJokes(): if joke[&#39;boohoo&#39;] &gt; worst: worst = joke[&#39;boohoo&#39;] worstID = joke[&#39;id&#39;] return jokes_data[worstID] # Add to haha for requested id def addJokeHaHa(id): jokes_data[id][&#39;haha&#39;] = jokes_data[id][&#39;haha&#39;] + 1 return jokes_data[id][&#39;haha&#39;] # Add to boohoo for requested id def addJokeBooHoo(id): jokes_data[id][&#39;boohoo&#39;] = jokes_data[id][&#39;boohoo&#39;] + 1 return jokes_data[id][&#39;boohoo&#39;] # Pretty Print joke def printJoke(joke): print(joke[&#39;id&#39;], joke[&#39;joke&#39;], &quot; n&quot;, &quot;haha:&quot;, joke[&#39;haha&#39;], &quot; n&quot;, &quot;boohoo:&quot;, joke[&#39;boohoo&#39;], &quot; n&quot;) # Number of jokes def countJokes(): return len(jokes_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initJokes() # initialize jokes # Most likes and most jeered best = favoriteJoke() print(&quot;Most liked&quot;, best[&#39;haha&#39;]) printJoke(best) worst = jeeredJoke() print(&quot;Most jeered&quot;, worst[&#39;boohoo&#39;]) printJoke(worst) # Random joke print(&quot;Random joke&quot;) printJoke(getRandomJoke()) # Count of Jokes print(&quot;Jokes Count: &quot; + str(countJokes())) . Most liked 15 11 If it wasn&#39;t for C, we’d all be programming in BASI and OBOL. haha: 15 boohoo: 4 Most jeered 5 2 UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity. haha: 12 boohoo: 5 Random joke 6 The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just 1 byte. And then everything crashed. haha: 11 boohoo: 1 Jokes Count: 18 . Backend Interface for Web API (Control) . An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems:1. Python Backend that stores data beyond a single Web page2. GH Pages/Fastpages Frontend that is responsible for presenting data . To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: . https://flask.nighthawkcodingsociety.com/api/jokes | https://flask.nighthawkcodingsociety.com/api/jokes/2 | https://flask.nighthawkcodingsociety.com/api/jokes/random | . As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. . The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. . FYI, there is NO output from this section . . from flask import Blueprint, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building import requests # used for testing import random # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/jokes&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api) class JokesAPI: # not implemented, this would be where we would allow creation of a new Joke class _Create(Resource): def post(self, joke): pass # getJokes() class _Read(Resource): def get(self): return jsonify(getJokes()) # getJoke(id) class _ReadID(Resource): def get(self, id): return jsonify(getJoke(id)) # getRandomJoke() class _ReadRandom(Resource): def get(self): return jsonify(getRandomJoke()) # getRandomJoke() class _ReadCount(Resource): def get(self): count = countJokes() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) # put method: addJokeHaHa class _UpdateLike(Resource): def put(self, id): addJokeHaHa(id) return jsonify(getJoke(id)) # put method: addJokeBooHoo class _UpdateJeer(Resource): def put(self, id): addJokeBooHoo(id) return jsonify(getJoke(id)) # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes api.add_resource(_Create, &#39;/create/&lt;string:joke&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . Frontend (View Simulation) and Hacks . This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. . To work with this code and make observation for learning... . Run a local server from flask_portfolio project and the change server variable to be local | Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests | The &quot;requests&quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. | Try running this with Debugging and observe what data is being created at each step (Required) | Try to format this data in Python print statements to be more readable (Required) | Start and stop local server and observe errors | . # server = &quot;http://127.0.0.1:5000/&quot; # run local server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server url = server + &quot;api/jokes/&quot; responses = [] # responses list # Get the count of jokes on server count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] # Update likes/dislikes test sequence num = str(random.randint(0, count-1)) # test a random record responses.append( requests.get(url+num) # Get/read joke by id ) responses.append( requests.put(url+&quot;like/&quot;+num) # Put/add to like count ) responses.append( requests.put(url+&quot;jeer/&quot;+num) # Put/add to jeer count ) # Get a random joke responses.append( requests.get(url+&quot;random&quot;) # Get/read a random joke ) # Cycle through and print responses for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) . KeyboardInterrupt Traceback (most recent call last) /home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb Cell 7 in &lt;cell line: 17&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; num = str(random.randint(0, count-1)) # test a random record &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; responses.append( &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; requests.get(url+num) # Get/read joke by id &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; ) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; responses.append( &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; requests.put(url+&#34;like/&#34;+num) # Put/add to like count &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=18&#39;&gt;19&lt;/a&gt; ) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=19&#39;&gt;20&lt;/a&gt; responses.append( &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=20&#39;&gt;21&lt;/a&gt; requests.put(url+&#34;jeer/&#34;+num) # Put/add to jeer count &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; ) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=23&#39;&gt;24&lt;/a&gt; # Get a random joke File ~/anaconda3/lib/python3.9/site-packages/requests/api.py:132, in put(url, data, **kwargs) 120 def put(url, data=None, **kwargs): 121 r&#34;&#34;&#34;Sends a PUT request. 122 123 :param url: URL for the new :class:`Request` object. (...) 129 :rtype: requests.Response 130 &#34;&#34;&#34; --&gt; 132 return request(&#39;put&#39;, url, data=data, **kwargs) File ~/anaconda3/lib/python3.9/site-packages/requests/api.py:61, in request(method, url, **kwargs) 57 # By using the &#39;with&#39; statement we are sure the session is closed, thus we 58 # avoid leaving sockets open which can trigger a ResourceWarning in some 59 # cases, and look like a memory leak in others. 60 with sessions.Session() as session: &gt; 61 return session.request(method=method, url=url, **kwargs) File ~/anaconda3/lib/python3.9/site-packages/requests/sessions.py:529, in Session.request(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json) 524 send_kwargs = { 525 &#39;timeout&#39;: timeout, 526 &#39;allow_redirects&#39;: allow_redirects, 527 } 528 send_kwargs.update(settings) --&gt; 529 resp = self.send(prep, **send_kwargs) 531 return resp File ~/anaconda3/lib/python3.9/site-packages/requests/sessions.py:645, in Session.send(self, request, **kwargs) 642 start = preferred_clock() 644 # Send the request --&gt; 645 r = adapter.send(request, **kwargs) 647 # Total elapsed time of the request (approximately) 648 elapsed = preferred_clock() - start File ~/anaconda3/lib/python3.9/site-packages/requests/adapters.py:440, in HTTPAdapter.send(self, request, stream, timeout, verify, cert, proxies) 438 try: 439 if not chunked: --&gt; 440 resp = conn.urlopen( 441 method=request.method, 442 url=url, 443 body=request.body, 444 headers=request.headers, 445 redirect=False, 446 assert_same_host=False, 447 preload_content=False, 448 decode_content=False, 449 retries=self.max_retries, 450 timeout=timeout 451 ) 453 # Send the request. 454 else: 455 if hasattr(conn, &#39;proxy_pool&#39;): File ~/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:703, in HTTPConnectionPool.urlopen(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw) 700 self._prepare_proxy(conn) 702 # Make the request on the httplib connection object. --&gt; 703 httplib_response = self._make_request( 704 conn, 705 method, 706 url, 707 timeout=timeout_obj, 708 body=body, 709 headers=headers, 710 chunked=chunked, 711 ) 713 # If we&#39;re going to release the connection in ``finally:``, then 714 # the response doesn&#39;t need to know about the connection. Otherwise 715 # it will also try to release it and we&#39;ll have a double-release 716 # mess. 717 response_conn = conn if not release_conn else None File ~/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:386, in HTTPConnectionPool._make_request(self, conn, method, url, timeout, chunked, **httplib_request_kw) 384 # Trigger any extra validation we need to do. 385 try: --&gt; 386 self._validate_conn(conn) 387 except (SocketTimeout, BaseSSLError) as e: 388 # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout. 389 self._raise_timeout(err=e, url=url, timeout_value=conn.timeout) File ~/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:1040, in HTTPSConnectionPool._validate_conn(self, conn) 1038 # Force connect early to allow us to validate the connection. 1039 if not getattr(conn, &#34;sock&#34;, None): # AppEngine might not have `.sock` -&gt; 1040 conn.connect() 1042 if not conn.is_verified: 1043 warnings.warn( 1044 ( 1045 &#34;Unverified HTTPS request is being made to host &#39;%s&#39;. &#34; (...) 1050 InsecureRequestWarning, 1051 ) File ~/anaconda3/lib/python3.9/site-packages/urllib3/connection.py:358, in HTTPSConnection.connect(self) 356 def connect(self): 357 # Add certificate verification --&gt; 358 self.sock = conn = self._new_conn() 359 hostname = self.host 360 tls_in_tls = False File ~/anaconda3/lib/python3.9/site-packages/urllib3/connection.py:174, in HTTPConnection._new_conn(self) 171 extra_kw[&#34;socket_options&#34;] = self.socket_options 173 try: --&gt; 174 conn = connection.create_connection( 175 (self._dns_host, self.port), self.timeout, **extra_kw 176 ) 178 except SocketTimeout: 179 raise ConnectTimeoutError( 180 self, 181 &#34;Connection to %s timed out. (connect timeout=%s)&#34; 182 % (self.host, self.timeout), 183 ) File ~/anaconda3/lib/python3.9/site-packages/urllib3/util/connection.py:85, in create_connection(address, timeout, source_address, socket_options) 83 if source_address: 84 sock.bind(source_address) &gt; 85 sock.connect(sa) 86 return sock 88 except socket.error as e: KeyboardInterrupt: .",
            "url": "https://zeen1717.github.io/zeeeeen/techtalk/webapi",
            "relUrl": "/techtalk/webapi",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://google-translate1.p.rapidapi.com/language/translate/v2/languages&quot; headers = { &quot;Accept-Encoding&quot;: &quot;application/gzip&quot;, &quot;X-RapidAPI-Key&quot;: &quot;179987897bmsh8a5982e0cb09756p1d6505jsn2477ea246422&quot;, &quot;X-RapidAPI-Host&quot;: &quot;google-translate1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) #print(response.text) # End Rapid API Code #json = response.json() # convert response to python json object print(&quot;data&quot;) data = response.json().get(&quot;data&quot;) languages = data[&quot;languages&quot;] for language in languages: print( language, language[&quot;language&quot;]) # for key, value in languages(): # print(key, value) # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . data {&#39;language&#39;: &#39;af&#39;} af {&#39;language&#39;: &#39;ak&#39;} ak {&#39;language&#39;: &#39;am&#39;} am {&#39;language&#39;: &#39;ar&#39;} ar {&#39;language&#39;: &#39;as&#39;} as {&#39;language&#39;: &#39;ay&#39;} ay {&#39;language&#39;: &#39;az&#39;} az {&#39;language&#39;: &#39;be&#39;} be {&#39;language&#39;: &#39;bg&#39;} bg {&#39;language&#39;: &#39;bho&#39;} bho {&#39;language&#39;: &#39;bm&#39;} bm {&#39;language&#39;: &#39;bn&#39;} bn {&#39;language&#39;: &#39;bs&#39;} bs {&#39;language&#39;: &#39;ca&#39;} ca {&#39;language&#39;: &#39;ceb&#39;} ceb {&#39;language&#39;: &#39;ckb&#39;} ckb {&#39;language&#39;: &#39;co&#39;} co {&#39;language&#39;: &#39;cs&#39;} cs {&#39;language&#39;: &#39;cy&#39;} cy {&#39;language&#39;: &#39;da&#39;} da {&#39;language&#39;: &#39;de&#39;} de {&#39;language&#39;: &#39;doi&#39;} doi {&#39;language&#39;: &#39;dv&#39;} dv {&#39;language&#39;: &#39;ee&#39;} ee {&#39;language&#39;: &#39;el&#39;} el {&#39;language&#39;: &#39;en&#39;} en {&#39;language&#39;: &#39;eo&#39;} eo {&#39;language&#39;: &#39;es&#39;} es {&#39;language&#39;: &#39;et&#39;} et {&#39;language&#39;: &#39;eu&#39;} eu {&#39;language&#39;: &#39;fa&#39;} fa {&#39;language&#39;: &#39;fi&#39;} fi {&#39;language&#39;: &#39;fr&#39;} fr {&#39;language&#39;: &#39;fy&#39;} fy {&#39;language&#39;: &#39;ga&#39;} ga {&#39;language&#39;: &#39;gd&#39;} gd {&#39;language&#39;: &#39;gl&#39;} gl {&#39;language&#39;: &#39;gn&#39;} gn {&#39;language&#39;: &#39;gom&#39;} gom {&#39;language&#39;: &#39;gu&#39;} gu {&#39;language&#39;: &#39;ha&#39;} ha {&#39;language&#39;: &#39;haw&#39;} haw {&#39;language&#39;: &#39;he&#39;} he {&#39;language&#39;: &#39;hi&#39;} hi {&#39;language&#39;: &#39;hmn&#39;} hmn {&#39;language&#39;: &#39;hr&#39;} hr {&#39;language&#39;: &#39;ht&#39;} ht {&#39;language&#39;: &#39;hu&#39;} hu {&#39;language&#39;: &#39;hy&#39;} hy {&#39;language&#39;: &#39;id&#39;} id {&#39;language&#39;: &#39;ig&#39;} ig {&#39;language&#39;: &#39;ilo&#39;} ilo {&#39;language&#39;: &#39;is&#39;} is {&#39;language&#39;: &#39;it&#39;} it {&#39;language&#39;: &#39;iw&#39;} iw {&#39;language&#39;: &#39;ja&#39;} ja {&#39;language&#39;: &#39;jv&#39;} jv {&#39;language&#39;: &#39;jw&#39;} jw {&#39;language&#39;: &#39;ka&#39;} ka {&#39;language&#39;: &#39;kk&#39;} kk {&#39;language&#39;: &#39;km&#39;} km {&#39;language&#39;: &#39;kn&#39;} kn {&#39;language&#39;: &#39;ko&#39;} ko {&#39;language&#39;: &#39;kri&#39;} kri {&#39;language&#39;: &#39;ku&#39;} ku {&#39;language&#39;: &#39;ky&#39;} ky {&#39;language&#39;: &#39;la&#39;} la {&#39;language&#39;: &#39;lb&#39;} lb {&#39;language&#39;: &#39;lg&#39;} lg {&#39;language&#39;: &#39;ln&#39;} ln {&#39;language&#39;: &#39;lo&#39;} lo {&#39;language&#39;: &#39;lt&#39;} lt {&#39;language&#39;: &#39;lus&#39;} lus {&#39;language&#39;: &#39;lv&#39;} lv {&#39;language&#39;: &#39;mai&#39;} mai {&#39;language&#39;: &#39;mg&#39;} mg {&#39;language&#39;: &#39;mi&#39;} mi {&#39;language&#39;: &#39;mk&#39;} mk {&#39;language&#39;: &#39;ml&#39;} ml {&#39;language&#39;: &#39;mn&#39;} mn {&#39;language&#39;: &#39;mni-Mtei&#39;} mni-Mtei {&#39;language&#39;: &#39;mr&#39;} mr {&#39;language&#39;: &#39;ms&#39;} ms {&#39;language&#39;: &#39;mt&#39;} mt {&#39;language&#39;: &#39;my&#39;} my {&#39;language&#39;: &#39;ne&#39;} ne {&#39;language&#39;: &#39;nl&#39;} nl {&#39;language&#39;: &#39;no&#39;} no {&#39;language&#39;: &#39;nso&#39;} nso {&#39;language&#39;: &#39;ny&#39;} ny {&#39;language&#39;: &#39;om&#39;} om {&#39;language&#39;: &#39;or&#39;} or {&#39;language&#39;: &#39;pa&#39;} pa {&#39;language&#39;: &#39;pl&#39;} pl {&#39;language&#39;: &#39;ps&#39;} ps {&#39;language&#39;: &#39;pt&#39;} pt {&#39;language&#39;: &#39;qu&#39;} qu {&#39;language&#39;: &#39;ro&#39;} ro {&#39;language&#39;: &#39;ru&#39;} ru {&#39;language&#39;: &#39;rw&#39;} rw {&#39;language&#39;: &#39;sa&#39;} sa {&#39;language&#39;: &#39;sd&#39;} sd {&#39;language&#39;: &#39;si&#39;} si {&#39;language&#39;: &#39;sk&#39;} sk {&#39;language&#39;: &#39;sl&#39;} sl {&#39;language&#39;: &#39;sm&#39;} sm {&#39;language&#39;: &#39;sn&#39;} sn {&#39;language&#39;: &#39;so&#39;} so {&#39;language&#39;: &#39;sq&#39;} sq {&#39;language&#39;: &#39;sr&#39;} sr {&#39;language&#39;: &#39;st&#39;} st {&#39;language&#39;: &#39;su&#39;} su {&#39;language&#39;: &#39;sv&#39;} sv {&#39;language&#39;: &#39;sw&#39;} sw {&#39;language&#39;: &#39;ta&#39;} ta {&#39;language&#39;: &#39;te&#39;} te {&#39;language&#39;: &#39;tg&#39;} tg {&#39;language&#39;: &#39;th&#39;} th {&#39;language&#39;: &#39;ti&#39;} ti {&#39;language&#39;: &#39;tk&#39;} tk {&#39;language&#39;: &#39;tl&#39;} tl {&#39;language&#39;: &#39;tr&#39;} tr {&#39;language&#39;: &#39;ts&#39;} ts {&#39;language&#39;: &#39;tt&#39;} tt {&#39;language&#39;: &#39;ug&#39;} ug {&#39;language&#39;: &#39;uk&#39;} uk {&#39;language&#39;: &#39;ur&#39;} ur {&#39;language&#39;: &#39;uz&#39;} uz {&#39;language&#39;: &#39;vi&#39;} vi {&#39;language&#39;: &#39;xh&#39;} xh {&#39;language&#39;: &#39;yi&#39;} yi {&#39;language&#39;: &#39;yo&#39;} yo {&#39;language&#39;: &#39;zh&#39;} zh {&#39;language&#39;: &#39;zh-CN&#39;} zh-CN {&#39;language&#39;: &#39;zh-TW&#39;} zh-TW {&#39;language&#39;: &#39;zu&#39;} zu . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . This cell is dependent on running API call in cell above! . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference APIs using a Web Interface. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI Frontend. JavaScript frontend code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | Backend. &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; Making a Jokes API Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; | . | .",
            "url": "https://zeen1717.github.io/zeeeeen/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 18 print(&quot;age&quot;, age, type(age)) print() print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) PhoneNumber = &quot;254-523-4568&quot; print(&quot;PhoneNumber&quot;, PhoneNumber, type(PhoneNumber)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;Phonenumber&quot;: PhoneNumber, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name John Doe &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 18 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? PhoneNumber 254-523-4568 &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 90.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; length 3 - langs[0] Python &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;John Doe&#39;, &#39;age&#39;: 18, &#39;Phonenumber&#39;: &#39;254-523-4568&#39;, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; length 5 - person[&#34;name&#34;] John Doe &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being built on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will be able collect many instances of that pattern. . List is used to collect many instances of a pattern | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration this example will explore constructing a List of people and cars. . As we learned above, a List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list. A class usually has extra method to support working with its objects/instances. | In the example below, the expression is appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries, or a collection of many similar data patterns. The output looks similar to JavaScript Object Notation (JSON), Jekyll/GitHub pages yml files, FastPages Front Matter. As discussed we will see this key/value patter often, you will be required to understand this data structure and understand the parts. Just believe it is peasy ;) and it will become so. | . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;PhoneNumber&quot;: &quot;254-523-4568&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;PhoneNumber&quot;: &quot;541-251-7845&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Steven&quot;, &quot;LastName&quot;: &quot;Eric&quot;, &quot;DOB&quot;: &quot;November 11&quot;, &quot;Residence&quot;: &quot;New York city&quot;, &quot;PhoneNumber&quot;: &quot;895-751-2445&quot;, &quot;Email&quot;: &quot;seric@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;Toyota Highlander&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Honey&quot;, &quot;LastName&quot;: &quot;Campbell&quot;, &quot;DOB&quot;: &quot;March 3&quot;, &quot;Residence&quot;: &quot;Denver&quot;, &quot;PhoneNumber&quot;: &quot;564-189-3874&quot;, &quot;Email&quot;: &quot;hcampbell@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;Ford F-Series&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;PhoneNumber&#39;: &#39;254-523-4568&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;PhoneNumber&#39;: &#39;541-251-7845&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}, {&#39;FirstName&#39;: &#39;Steven&#39;, &#39;LastName&#39;: &#39;Eric&#39;, &#39;DOB&#39;: &#39;November 11&#39;, &#39;Residence&#39;: &#39;New York city&#39;, &#39;PhoneNumber&#39;: &#39;895-751-2445&#39;, &#39;Email&#39;: &#39;seric@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;Toyota Highlander&#39;]}, {&#39;FirstName&#39;: &#39;Honey&#39;, &#39;LastName&#39;: &#39;Campbell&#39;, &#39;DOB&#39;: &#39;March 3&#39;, &#39;Residence&#39;: &#39;Denver&#39;, &#39;PhoneNumber&#39;: &#39;564-189-3874&#39;, &#39;Email&#39;: &#39;hcampbell@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;Ford F-Series&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet, to applications, or preparing it to be stored into a database. It is a great way to exchange data between programs and programmers. Exchange of data between programs includes the data type the method/function and the format of the data type. These concepts are key to learning how to write functions, receive, and return data. This process is often referred to as an Application Programming Interface (API). . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Phone:&quot;, d_rec[&quot;PhoneNumber&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Phone: 254-523-4568 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Phone: 541-251-7845 Cars: 4Runner Steven Eric Residence: New York city Birth Day: November 11 Phone: 895-751-2445 Cars: Toyota Highlander Honey Campbell Residence: Denver Birth Day: March 3 Phone: 564-189-3874 Cars: Ford F-Series . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . # while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Phone: 254-523-4568 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Phone: 541-251-7845 Cars: 4Runner Steven Eric Residence: New York city Birth Day: November 11 Phone: 895-751-2445 Cars: Toyota Highlander Honey Campbell Residence: Denver Birth Day: March 3 Phone: 564-189-3874 Cars: Ford F-Series . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Phone: 254-523-4568 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Phone: 541-251-7845 Cars: 4Runner Steven Eric Residence: New York city Birth Day: November 11 Phone: 895-751-2445 Cars: Toyota Highlander Honey Campbell Residence: Denver Birth Day: March 3 Phone: 564-189-3874 Cars: Ford F-Series . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://zeen1717.github.io/zeeeeen/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://zeen1717.github.io/zeeeeen/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hello!! This is Zeen!!🙂 I am a student in Del Norte High School! Let me show you some pictures of Husky🐶. They are very cute, right? . . . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://zeen1717.github.io/zeeeeen/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://zeen1717.github.io/zeeeeen/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}