{
  
    
        "post0": {
            "title": "U3 S9 and S11",
            "content": "Notes . If clauses are separated or have one if clause inside another if clause is possible to be different | Boolean values can be expressed in different ways to express the same result | When applied to sorted data, binary search is usually more efficient than sequential/linear search. | And binary search must sort groups of numbers in ascending or descending order | . Hacks . Write this Boolean statement in the form of a conditional (if/else) statement: stayInside⟵((isCold) OR (isRaining)) | if (isCold or isRaining) { stayInside &lt;-- True } else { stayInside &lt;-- False } . Create an algorithm that uses selection and/or iteration that will represent one player’s complete turn. | During a turn, each player gets 4 attempts/chances to get the greatest number possible. . During each attempt, the player will use a random number generator to select a random number from 1 to 10. . After they have had 4 chances, their score is the greatest number they received from the random number generator, and their turn is over. . import random attempts = 4 score = [] while attempts &gt; 0: score.append(random.randint(1,10)) attempts = attempts - 1 print(score) print(&quot;Final Score:&quot;,max(score)) . [2, 8, 2, 2] Final Score: 8 . Create an algorithm that will allow the arrow to reach the gray square | { if IsBlocked{ TurnRight } else{ MoveForward } } . Make a binary search tree of different the list [1,2,3,4,6,9,11,69] | . Explain thorughly how to find the number 69 in the list above (use key words) | Divide the first index number plus the last index number by two, take the median, if it is not 69, continue and check the left and right indexes, if it is smaller than 69, branch search to the right, and vice versa to the left, repeat the process until it finds 69 . Make a diagram explaining how you found the list (not tree, include equation) | . Put this list of strings in a order that can be used for binary search [“store”,”Market”,”Walmart”,Target”,”Ralphs”] | [&quot;Market&quot;,&quot;Ralphs&quot;,&quot;store&quot;,&quot;Target&quot;,&quot;Walmart&quot;] Put initial letters in alphabetical order . Explain why Binary Search is more efficient than Sequential Search | Because using sequential search, it needs to eliminate one number at a time to find the answer, but if you use binary search, it is constantly half and half to narrow down the range, and then finally determine the number, so binary search is obviously more efficient . [64,36,16,11,9] Explain which number you are finding, how many check it would take, and make a binary search tree | 9, 2 times check . .",
            "url": "https://zeen1717.github.io/zeeeeen/2022/12/12/U3-S9-11.html",
            "relUrl": "/2022/12/12/U3-S9-11.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "U3 S8 and S10",
            "content": "Vocabulary . Iteration: refers to the repetition of processes in an instruction | for loop :The command is repeated a certain number of times | while loop: the instruction is repeated until the requirement is reached | Initialization: starting value of variable. | Lists: Sets in iterable data | Nested lists: several similar arrays of data grouped together | . Notes . For loop repeats a function a certain number of times | The while loop is used to repeat a piece of code a certain number of times until the condition is met. | The while loop is very similar to the if condition, except that while is executed continuously until it is no longer true, while if is executed only once. | List index starts at 0 in the list | append adds an element at the end, remove removes it at the index, and pop removes the last item. | Exercise#1 . Task Reverse a list utilizing features of lists and iteration Hint: Use two parameters with the range function . list = [1, 2, 3, 4, 5] # Print this in reverse order for number in range(5, 0, -1): print(number) . 5 4 3 2 1 . Exercise #2 . Task Similar to insertion sort, this algorithm takes an unsorted array and returns a sorted array Unlike insertion sort where you iterate through the each element and move the smaller elements to the front, this algorithm starts at the beginning and swaps the position of every element in the array . Expected Output: The sorted array from 1-10 . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] # Sort this array using bubble sort def BubbleSort(list) : length = len(list) for i in range(length): for a in range(0, length-i-1): if list[a] &gt; list[a+1]: tem = list [a + 1] list [a + 1] = list [a] list [a] = tem if __name__ == &quot;__main__&quot;: BubbleSort(list) print (&quot;Sorted Array:&quot;) for i in range(len(list)): print(&quot;%d&quot; % list[i], end=&quot; &quot;) . Sorted Array: 0 1 2 3 4 5 6 7 8 9 . . A while loop loops over an interval until a condition is met, a for loop iterates over an iterable object and lasts a certain amount of time. . . Use a for loop to iterate through the list until the user inputs quit .",
            "url": "https://zeen1717.github.io/zeeeeen/2022/12/12/U3-S8-10.html",
            "relUrl": "/2022/12/12/U3-S8-10.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "U3 S12-13 Homework",
            "content": "Notes . Procedures can perform certain operations but do not return values | Procedures can be used to convert values | The name of the procedure must be descriptive | We can modularize procedures by dividing complex procedures into several simple procedures | . 3.12 Hacks part 1 . Problem 1: This problem involves parameters Qais is writing code to calculate formulas from his math class. He&#39;s currently working on a procedure to calculate average speed, based on this formula: . Average speed= . Total Time/Total Distance​ . Highlight which of these is the best procedure for calculating and displaying average speed. PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) } . Problem 2: Procedures with return values James Hunter is looking through his classmate&#39;s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion) . { moreEnergy ← CONCAT(myEmotion, &quot;!!!&quot;) . moreVolume ← UPPER(moreEnergy) . RETURN moreVolume } . That procedure manipulates strings using two built-in procedures, CONCAT for concatenating two strings together, and UPPER for converting a string to uppercase. . James Hunter then sees this line of code: . heightenEmotions(&quot;im mad&quot;) . After that line of code runs, will nothing be displayed? . False . Problem 3: Procedures with return values Bubz is writing a program to calculate the carbon footprint of his activities. The procedure calcFlightFootprint calculates the pounds of carbon dioxide produced per passenger in a flight that covers a given number of miles and seats a given number of passengers. . PROCEDURE calcFlightFootprint(numMiles, numPassengers) { CO2_PER_MILE ← 53.29 . carbonPerFlight ← numMiles * CO2_PER_MILE . carbonPerPassenger ← carbonPerFlight / numPassengers . RETURN carbonPerPassenger . } . Bubz wants to use that procedure to calculate the total footprint for his two upcoming flights: LA to NY: 2,451 miles and 118 passengers NY to London: 3,442 miles and 252 passengers . Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) . laNyCarbon ← calcFlightFootprint(2451, 118) nyLondonCarbon ← calcFlightFootprint(3442, 252) totalFootprint ← laNyCarbon + nyLondonCarbon . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . 3.12 Hacks part 2 . PROCEDURE find a () . { c -- 9 . b &lt;-- 9 * 9 . a &lt;-- b * c . Print (a) . } . What is a? . a=729 . cost ⟵ 173 tax - 10% . PROCEDURE applytax (cost, cpercentDiscounted) { temp &lt;-- 100 + percentTaxed . temp &lt;-- temp / 100 . cost &lt;-- cost x temp . Print(cost)} . What is the cost? . cost is 190.3 . Tempature - 103 Degrees . PROCEDURE convet Fahrenheit (tempature) . { . Celsius &lt;-- tempature - 32 . Celsius &lt;-- Celsius x 5/9 . Print (Celsius)} . Celsius is 39.44 . 3.13 Homework/Hacks for Part 1 and Part 2 of the lesson . Create a procedure that is meant to replace the top running backs yards per game in one season if the current running back has more yards per game | Necessary Parameters: toprbyardspg(100), currentrbyards(1260), totalGames(12) . PROCEDURE updateByardspg(toprbyardspg, currentrbyards, totalGames) { currentrbyardspg &lt;-- currentrbyards/totalGames if (currentrbyardspg &gt; toprbyardspg) { toprbyardspg &lt;-- currentrbyards } return(toprbyardspg) } . Write a procedure that will allow the A+ to get to the 1, while avoiding the black boxes. | Use what you learned about moving robots . PROCEDURE A+GetTo1() { move_Forward() rotate_left() move_Forward() move_Forward() rotate_right() move_Forward() move_Forward() move_Forward() rotate_left() move_Forward() move_Forward() rotate_left() move_Forward() move_Forward() rotate_right() move_Forward() rotate_left() move_Forward() move_Forward() } . Which Is the Correct Way to define the Name of a Procedure? | A. PROCEDURE MYLIST . B. PROCEDURE MyList . C. procedure mylist . B . Write A Procedure That gets the BeachBall To the Green Square | PROCEDURE GetBeachballToGreen() { move_Forward() rotate_left() move_Forward() rotate_right() move_Forward() move_Forward() move_Forward() move_Forward() move_Forward() rotate_left() move_Forward() move_Forward() } .",
            "url": "https://zeen1717.github.io/zeeeeen/2022/12/12/U3-S12-13.html",
            "relUrl": "/2022/12/12/U3-S12-13.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Notes",
            "content": "U3 S12-13 Homework . toc: true | comments: true | . Problem 1: This problem involves parameters Qais is writing code to calculate formulas from his math class. He&#39;s currently working on a procedure to calculate average speed, based on this formula: . Average speed= . Total Time/Total Distance​ . Highlight which of these is the best procedure for calculating and displaying average speed. PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (distance/time) } PROCEDURE calcAvgSpeed (distance) { DISPLAY (distance/time) } PROCEDURE calcAvgSpeed (distance, time) { DISPLAY (time/distance) } Problem 2: Procedures with return values James Hunter is looking through his classmate&#39;s program and sees a procedure called heightenEmotions: PROCEDURE heightenEmotions(myEmotion) . { moreEnergy ← CONCAT(myEmotion, &quot;!!!&quot;) . moreVolume ← UPPER(moreEnergy) . RETURN moreVolume } . That procedure manipulates strings using two built-in procedures, CONCAT for concatenating two strings together, and UPPER for converting a string to uppercase. . James Hunter then sees this line of code: . heightenEmotions(&quot;im mad&quot;) . After that line of code runs, will nothing be displayed? . True . False . Problem 3: Procedures with return values Bubz is writing a program to calculate the carbon footprint of his activities. The procedure calcFlightFootprint calculates the pounds of carbon dioxide produced per passenger in a flight that covers a given number of miles and seats a given number of passengers. . PROCEDURE calcFlightFootprint(numMiles, numPassengers) { CO2_PER_MILE ← 53.29 . carbonPerFlight ← numMiles * CO2_PER_MILE . carbonPerPassenger ← carbonPerFlight / numPassengers . RETURN carbonPerPassenger . } . Bubz wants to use that procedure to calculate the total footprint for his two upcoming flights: LA to NY: 2,451 miles and 118 passengers NY to London: 3,442 miles and 252 passengers . Which of these code snippets successfully calculates and stores her total footprint? Highlight 2 answers. . totalFootprint ← calcFlightFootprint(2451, 118) + calcFlightFootprint(3442, 252) . totalFootprint ← calcFlightFootprint(2451, 118 + 3442, 252) . totalFootprint ← calcFlightFootprint((2451, 118) + (3442, 252)) . laNyCarbon ← calcFlightFootprint(2451, 118) nyLondonCarbon ← calcFlightFootprint(3442, 252) totalFootprint ← laNyCarbon + nyLondonCarbon | &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; .",
            "url": "https://zeen1717.github.io/zeeeeen/2022/12/08/U3-S12-13.html",
            "relUrl": "/2022/12/08/U3-S12-13.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "U3 S8 and S10",
            "content": "Vocabulary . Iteration: refers to the repetition of processes in an instruction | for loop :The command is repeated a certain number of times | while loop: the instruction is repeated until the requirement is reached | Initialization: starting value of variable. | Lists: Sets in iterable data | Nested lists: several similar arrays of data grouped together | . Notes . For loop repeats a function a certain number of times | The while loop is used to repeat a piece of code a certain number of times until the condition is met. | The while loop is very similar to the if condition, except that while is executed continuously until it is no longer true, while if is executed only once. | List index starts at 0 in the list | append adds an element at the end, remove removes it at the index, and pop removes the last item. | Exercise#1 . Task Reverse a list utilizing features of lists and iteration Hint: Use two parameters with the range function . list = [1, 2, 3, 4, 5] # Print this in reverse order for number in range(5, 0, -1): print(number) . 5 4 3 2 1 . Exercise #2 . Task Similar to insertion sort, this algorithm takes an unsorted array and returns a sorted array Unlike insertion sort where you iterate through the each element and move the smaller elements to the front, this algorithm starts at the beginning and swaps the position of every element in the array . Expected Output: The sorted array from 1-10 . list = [9, 8, 4, 3, 5, 2, 6, 7, 1, 0] # Sort this array using bubble sort def BubbleSort(list) : length = len(list) for i in range(length): for a in range(0, length-i-1): if list[a] &gt; list[a+1]: tem = list [a + 1] list [a + 1] = list [a] list [a] = tem if __name__ == &quot;__main__&quot;: BubbleSort(list) print (&quot;Sorted Array:&quot;) for i in range(len(list)): print(&quot;%d&quot; % list[i], end=&quot; &quot;) . Sorted Array: 0 1 2 3 4 5 6 7 8 9 . . A while loop loops over an interval until a condition is met, a for loop iterates over an iterable object and lasts a certain amount of time. . . Use a for loop to iterate through the list until the user inputs quit .",
            "url": "https://zeen1717.github.io/zeeeeen/2022/12/07/U3-S8-10.html",
            "relUrl": "/2022/12/07/U3-S8-10.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "U3 S9 and S11",
            "content": "Notes . If clauses are separated or have one if clause inside another if clause is possible to be different | Boolean values can be expressed in different ways to express the same result | . Hacks . Make a binary search tree of different the list [1,2,3,4,6,9,11,69] . | Explain thorughly how to find the number 69 in the list above (use key words) . | Make a diagram explaining how you found the list (not tree, include equation) . | Put this list of strings in a order that can be used for binary search [“store”,”Market”,”Walmart”,Target”,”Ralphs”] . | Explain why Binary Search is more efficient than Sequential Search . | [64,36,16,11,9] Explain which number you are finding, how many check it would take, and make a binary search tree . |",
            "url": "https://zeen1717.github.io/zeeeeen/2022/12/06/U3-S9-11.html",
            "relUrl": "/2022/12/06/U3-S9-11.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "U3 S5-6",
            "content": "Homework . toc: true | badges: true | comments: true | categories: [Week 13] | . Notes . In the Boolean value, Ture is 1 and False is 0. | &quot;==&quot; is an alternative to equal to, since &quot;=&quot; is reserved for value assignment | The relational operators come first and the logical operators come second, in the order of not, and, or | In conditional, The true or false statement is a Boolean expression | Flow Chart of a Nested Conditional Statement: in conditonal 1, &quot;no&quot; goes to statement, &quot;yes&quot; goes to condition 2. Condition 2 is the same | Homework/Hacks . our homework we have decided for a decimal number to binary converter. You must use conditional statements within your code and have a input box for where the decimal number will go. This will give you a 2.7 out of 3 and you may add anything else to the code to get above a 2.7. . Below is an example of decimal number to binary converter which you can use as a starting template. . def DecimalToBinary(num): strs = &quot;&quot; while num: # if (num &amp; 1) = 1 if (num &amp; 1): strs += &quot;1&quot; # if (num &amp; 1) = 0 else: strs += &quot;0&quot; # right shift by 1 num &gt;&gt;= 1 return strs # function to reverse the string def reverse(strs): print(strs[::-1]) # Driver Code num = 67 print(&quot;Binary of num 67 is:&quot;, end=&quot; &quot;) reverse(DecimalToBinary(num)) . Binary of num 67 is: 1000011 . def DecimalToBinary(num): if num &gt; 0 : DecimalToBinary(int(num / 2)) print(num % 2, end=&#39;&#39;) num = int(input(&quot;Enter a decimal number n&quot;)) DecimalToBinary(num) . 1100010 .",
            "url": "https://zeen1717.github.io/zeeeeen/2022/12/01/Group3.html",
            "relUrl": "/2022/12/01/Group3.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "U3 S3-4",
            "content": "Notes . the symbol for modulus is %. | An index is a number that represents a position. | The pseudocode is a program written in common language. | substring = string[start:end] | 3.3 Expressions(Show video 1 and 3) . Vocab: fill in the blanks . the symbol for exponent is * the symbol for addition is + the symbol for subtraction is - the symbol for multiplication is __ the symbol for division is / the symbol for modulus is %__ an algorithm is basic . Sequencing Practice: the code below does not follow the intended steps below. change the code so that it does so. . divide value1 by 10(value1 = 5) | multiply 2 from the result of the step 1 | subtract 4 from the result of the step 2 | print the result of step 3 | value1 = 5 value2 = value1 / 10 #step 1 value3 = value2 * 2 #step 2 value4 = value3 - 4 #step 3 print(value4) . -3.0 . Selection/Iteration Practice: Create a function to print ONLY the numbers of numlist that are divisble by 3. Hint: use the MOD operator (a % b) to find the remainder when a is divided by b. . numlist = &quot;3&quot;,&quot;4&quot;,&quot;9&quot;,&quot;76&quot;,&quot;891&quot; for number in numlist: if int(number) %3==0 : print( number + &quot; is divisible by 3&quot;) continue else: continue . 3 is divisible by 3 9 is divisible by 3 891 is divisible by 3 . Homework/Binary Adaptation: Create a python function that will convert a decimal number 1-255 to binary using mathematical operations and powers of 2. Challenge: add frontend with javascript or html. . def convert(decimal): if decimal &gt; 0 : convert(int(decimal/2)) print(decimal % 2, end=&#39;&#39;) decimal = int(input(&quot;Enter a decimal number n&quot;)) convert(decimal) . 1111000 . 3.4 Strings(Show video 1) . Vocab: fill in the blanks using the video . Index is a number representing a position, like a character&#39;s position in a string or a string&#39;s position in a list. Concatenation is the operation of joining two strings together__ Length is the count of all its characters except the null character &quot;0&quot; A substring is _a subset or part of another string, or it is a contiguous sequence of characters within a string. . What is psuedocode? . Pseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts. . Can you think of some benefits of using pseudocode prior to writing out the actual code? . Choose an everyday activity | Imagine that you are providing instructions for this activity to a person who has never done it before | Challenge someone to do the steps you wrote out | Ex. Brushing Teeth . Pick up your toothbrush | Rinse toothbrush | Pick up toothpaste | Place toothpaste on the toothbrush | Rinse toothbrush again | Brush teeth in a circular motion | Spit | Wash mouth | Rinse toothbrush | You have brushed your teeth! | Substring/Length Practice: change the print functions to print &quot;hello&quot;, &quot;bye&quot;, and the string length . #the substring will have the characters including the index &quot;start&quot; to the character BEFORE the index &quot;end&quot; #len(string) will print the length of string string = &quot;hellobye&quot; print(string[0:5]) print(string[5:8]) print(string[0:8]) . hello bye hellobye . Concatenation Practice: combine string1 and string2 to make string3, then print string3. . string1 = &quot;computer&quot; string2 = &quot;science&quot; string3 = string1 + string2 print(string3) . computerscience . Homework/List Adaptation: create a function that prints the name of each string in the list and the string&#39;s length. Challenge: add frontend with javascript or html. . names = [&quot;jaden&quot;,&quot;max&quot;,&quot;dylan&quot;,&quot;orlando&quot;] def length(list): for name in names : print(name + str(len(name))) length(names) . jaden5 max3 dylan5 orlando7 . Stuck? . Check out what we did. | . Have any questions? . Ask us if you have any questions! | .",
            "url": "https://zeen1717.github.io/zeeeeen/week-13/big-idea-3/2022/11/29/Group2.html",
            "relUrl": "/week-13/big-idea-3/2022/11/29/Group2.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "U3 S1-2",
            "content": "Notes . Strings must be enclosed in quotation marks and lists must be enclosed in square brackets. We can swap variables by using temporary variables. . Assign a variable . using var (variable name) = (value) | using const (variable name) = (value) | using let (variable name) = (value) | Boolean is another key point for the use of variables, Boolean is True and False . 2 type of data are . string which is just letters that form words | list containing multiple data points， Connects to data abstraction where data points can be pulled from lists | Individual elements can be called, separated and organized using for loops. . Challenge . The list given contains multiple numbers with different values. There are also 2 variables that define the minimum and maximum valid values. Given these variables, output the values that do not fit into the valid range as well as their index values. . data = [104, 101, 4, 105, 308, 103, 5, 107, 100, 306, 106, 102, 108] # list of the different numerical values min_valid = 100 # minimum value max_valid = 200 # maximum value numbers = data for number in numbers : if number &gt; 200 or number &lt; 100 : print(number) . 4 308 5 306 . 9 306 6 5 4 308 2 4 . Homework/Hacks . The list given contains 4 album names - Welcome to my Nightmare, Bad Company, Nightflight, More Mayhem - and each album contains at least 4 songs within another list. Given this, write a block of code that enables users to input in integer values that correspond to the albums and songs - Welcome to my Nightmare is 1, Bad Company is 2, etc. - Then, a sentence is outputted that says Playing ___ based on which song was chosen using the numbers inputted by the user that corresponds to each song. . albums = [ (&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, # First album list [ (1, &quot;Welcome to my Nightmare&quot;), (2, &quot;Devil&#39;s Food&quot;), (3, &quot;The Black Widow&quot;), (4, &quot;Some Folks&quot;), (5, &quot;Only Women Bleed&quot;), ] ), (&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974, # Second album list [ (1, &quot;Can&#39;t Get Enough&quot;), (2, &quot;Rock Steady&quot;), (3, &quot;Ready for Love&quot;), (4, &quot;Don&#39;t Let Me Down&quot;), (5, &quot;Bad Company&quot;), (6, &quot;The Way I Choose&quot;), (7, &quot;Movin&#39; On&quot;), (8, &quot;Seagull&quot;), ] ), (&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981, [ (1, &quot;I Turned to Stone&quot;), (2, &quot;Keeping a Rendezvous&quot;), (3, &quot;Reaper of the Glory&quot;), (4, &quot;She Used Me Up&quot;), ] ), (&quot;More Mayhem&quot;, &quot;Imelda May&quot;, 2011, [ (1, &quot;Pulling the Rug&quot;), (2, &quot;Psycho&quot;), (3, &quot;Mayhem&quot;), (4, &quot;Kentish Town Waltz&quot;), ] ) ] a1 = input(&quot;enter number of albums list&quot;) a2 = input(&quot;enter number of songs list&quot;) print (&quot;Playing&quot; + albums[int(a1) - 1][3][int(a2) - 1][1]) . PlayingRock Steady . 1 1 Playing &quot;Welcome to my Nightmare&quot; 2 2 Playing &quot;Rock Steady&quot; .",
            "url": "https://zeen1717.github.io/zeeeeen/jupyter/week%2013/2022/11/28/Group1.html",
            "relUrl": "/jupyter/week%2013/2022/11/28/Group1.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "correction",
            "content": "Final Test Correction . 1 . The initial 2 is multiplied three times by 5, after the first 2 is multiplied by 5 and the resulting 10 is multiplied by the next 5. . 2 . The dineouthelper team should provide information about which food allergies and dietary restrictions are available at the different restaurants that live near Alejandra, as it is part of the application itself, and which restaurants they have visited are offered by alejandra . 3 . The values of j and k should be between 1 and length, because they are valid only when j and k are valid list indexes . 4 . It should be compared with all subsequent elements, because the title says if it contains any duplicate values. Show ture . 5 . The c option has a positive value and the procedure returns true as expected . 6 . Open protocols do not keep all transmitted data secure, they only provide a way to standardize transmission . 7 . The Internet is not a data stream, so it is accessed through the network that becomes the internet . 8 . Binary sequences can represent strings, colors, audio recordings . 9 . Age can be expressed as a number, boolean can only indicate true or false . 10 . The isopen variable should be boolean for true or and false . 11 . f is the index 3 character at index 2 in the wordlist, so it should be h, which is the character at index 2 of myword . 12 . yourlist is assigned to my list, so it should be [10, 30, 50, 70] . 13 . It should be one less loop iteration, so it is 15 .",
            "url": "https://zeen1717.github.io/zeeeeen/correction",
            "relUrl": "/correction",
            "date": " • Nov 10, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Hello",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Hello to Python n”, “&gt; A journey through Python starting the classic &quot;Hello, World&quot; example, then progressing in learning to building a quiz. This focuses on College Board vocabulary and examples using Variables, Assignments, Functions, and Selection. n”, “ n”, “- title: Hello to Python n”, “- toc: true n”, “- comments: true n”, “- image: /images/python_basics_cheat_sheet.webp n”, “- permalink: /collegeboard/python n”, “- categories: [1.A, 3.A, 4.B] n”, “- tags: [python] n”, “- type: ap n”, “- week: 1” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Hello, World! n”, “These examples show the basic language structures and constructs of Python using print and input commands (aka anatomy).” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Print command using Static Text which performs output n”, “The classic introduction to a programming language is to output a &quot;Hello, World!&quot; message. In Python, this is a print statement. n”, “- The command or function is print() n”, “- &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. n”, “- &quot;Hello, World&quot; is a parameter to the print command. n”, “- The print command outputs the parameter to the terminal, as you see it in this Jupyter document n”, “- Output in Jupyter Notebook is below the code cell. Output will vary depending on tools and development intentions. Python print typically outputs to a terminal, we will see that when students start using Visual Studio Code.” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [], “source”: [ “print(&quot;Hello World!&quot;)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Dynamic example showing variables, input and output n”, “This second example is a sequence of code, two or more lines forms a sequence. This example takes input from the user and stores the input into a variable called msg (short for message), then outputs the msg to terminal. - This example is Dynamic as the input and output can change each time the code is run. n”, “- A variable &quot;msg&quot; is part of both statement n”, “ - The variable &quot;msg&quot; is used to capture the input command n”, “ - The variable &quot;msg&quot; is then used as a parameter to print command, causing input to be output to terminal, or in Jupyter Notebook below the code cell. n”, “- The &quot;input&quot; command activates the jupyter notebook input box, which obtains input from the user (try it!) n”, “ - the &quot;msg&quot; variable is the dynamic result of the input command n”, “- The print command outputs the &quot;msg&quot; variable captured in the input statement n”, “ - note, msg is a parameter to the print function n”, “- Input and Output in Jupyter Notebook Input is NOT in line with Output, this is a little annoyance and requires familiarity. Input and Output will vary depending on tools and development intentions. Python print typically obtains input and outputs to a terminal, students will see that when they run Python programs using Visual Studio Code.” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [], “source”: [ “msg = input(&quot;Enter a greeting: &quot;) n”, “print(msg)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Building a Function n”, “This example adds to the basics of the Python anatomy, a function. Input, output, and grouping commands in functions is the key to most programming languages. This example simulates a free response answer to a question. n”, “- The &quot;def question_and_answer(prompt)&quot; now contains multiple indented commands, the commands print and input were learned previously. n”, “- Grouping a sequence of commands, often used repeatedly, is called procedural abstraction. n”, “- Procedure, Function, def are all synonyms in the Python language. n”, “- The &quot;def &quot; is a key word in Python that defines a function. Using this keyword defines a group of commands, but does not run them initially. n”, “- The name of the function in this example is &quot;question_and_answer&quot;. In essence, we are defining our own command within the Python language. n”, “- The three &quot;question_and_answer&quot; commands that follow the function and indented commands allow this function to be run. n”, “- This code of the function is then run multiple times, each command line providing a unique &quot;prompt&quot; as a result of the literal parameter passed to the function. n”, “- The function takes a parameter called &quot;prompt&quot;, which is a message output to the user to describe the input requested. n”, “- String concatenation &quot;+&quot; prefixes the prompt with the literal message &quot;Question: &quot;. n”, “- The &quot;msg&quot; variable is captured as a result of the jupyter notebook input supplied by the user n”, “- The input &quot;msg&quot; is output back to the user with &quot;Answer: &quot; concatenated to the front.” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [], “source”: [ “def question_and_answer(prompt): n”, “ print(&quot;Question: &quot; + prompt) n”, “ msg = input() n”, “ print(&quot;Answer: &quot; + msg) n”, “ n”, “question_and_answer(&quot;Name the Python output command mentioned in this lesson?&quot;) n”, “question_and_answer(&quot;If you see many lines of code in order, what would College Board call it?&quot;) n”, “question_and_answer(&quot;Describe a keyword used in Python to define a function?&quot;)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Imports, Selection, and Logical Expressions n”, “In Python anatomy of you will be importing libraries and functions. This is code that is developed by others. In this example we are importing from a library called &quot;os&quot;, this library extracts properties from the operating system of your existing system. Additionally, this example uses the custom function defined earlier in the Jupyter document. Python and Jupyter docs requires you to reference imports and definitions above the referencing line of code. n”, “- import os, sys obtain functions and variables from running environment n”, “- print(‘Hello, ‘ + getpass.getuser() + &quot; running &quot; + sys.executable + &quot; on &quot; + sys.platform + &quot;!&quot;), is a concatenated statement that outputs properties from the import n”, “ n”, “Next, this example defines a new function &quot;question_with_response&quot;, this function returns a value input by the user. This allows programmer to evaluate the response. The purpose of obtaining the return value is to evaluate if correct response was given to the question. n”, “- response from &quot;question_with_response&quot; is captured in a variable called &quot;rsp&quot; n”, “ - return command in function returns msg input by user n”, “ - assignment to &quot;rsp&quot; is allowed a function is returning a value, names do not need to match (but could) n”, “- if command is next command in sequence after &quot;rsp&quot; assignment n”, “ - this command contains an expression, rsp == &quot;import&quot; which compare what is typed to the string literal answer n”, “ - an if expression is evaluated for true or false n”, “ - true takes branch of code directly under if n”, “ - false takes branch of code directly under else command n”, “ n”, “The grand finally of this example is calculating the right/total. n”, “- question = 3 is defined as number of questions n”, “- correct = 0 is defined as running score n”, “- correct += 1 is the way to add one to the score, this code is placed in sequence under correct expression evaluation n”, “- since question and correct are numbers, versus strings, to place them in concatenation in print statements you must inclose them in Python function str() which turns number into string. n”, “- final print statement is concatenated and formatted to give user and right over wrong” ] }, { “cell_type”: “code”, “execution_count”: null, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [], “source”: [ “import getpass, sys n”, “ n”, “def question_with_response(prompt): n”, “ print(&quot;Question: &quot; + prompt) n”, “ msg = input() n”, “ return msg n”, “ n”, “questions = 3 n”, “correct = 0 n”, “ n”, “print(‘Hello, ‘ + getpass.getuser() + &quot; running &quot; + sys.executable) n”, “print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) n”, “question_and_answer(&quot;Are you ready to take a test?&quot;) n”, “ n”, “rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) n”, “if rsp == &quot;import&quot;: n”, “ print(rsp + &quot; is correct!&quot;) n”, “ correct += 1 n”, “else: n”, “ print(rsp + &quot; is incorrect!&quot;) n”, “ n”, “rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) n”, “if rsp == &quot;if&quot;: n”, “ print(rsp + &quot; is correct!&quot;) n”, “ correct += 1 n”, “else: n”, “ print(rsp + &quot; is incorrect!&quot;) n”, “ n”, “rsp = question_with_response(&quot;Each ‘if’ command contains an ‘_____’ to determine a true or false condition?&quot;) n”, “if rsp == &quot;expression&quot;: n”, “ print(rsp + &quot; is correct!&quot;) n”, “ correct += 1 n”, “else: n”, “ print(rsp + &quot; is incorrect!&quot;) n”, “ n”, “print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions))” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Hacks n”, “Test running a Python file directly n”, “- From python directory run quiz.py in VS Code, this will show workflow of Input and Output in terminal n”, “ n”, “Build your own Jupyter Notebook meeting these College Board and CTE competencies n”, “- Build your own quiz, including my questions and show outputs n”, “- Create both Markdown for description and Code for execution n”, “- Structure your Python code with comments &quot;#&quot; to complement Markdown descriptions n”, “ n”, “Additional requirements n”, “- Build your quiz so that it captures the key Vocabulary from this Jupyter document n”, “- Calculate the percentage of your quiz n”, “- Review College Board Big Idea outline, see if you can reference locations in Markdown that support vocabulary n”, “ n”, “Extra credit, Advanced n”, “- Do you see repeating pattern of code? Try to implement solution to avoid the repeating pattern (hint: list and iteration)” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Bash”, “language”: “bash”, “name”: “bash” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “bash”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.8.10” }, “vscode”: { “interpreter”: { “hash”: “916dbcbb3f70747c44a77c7bcd40155683ae19c65e1c03b4aa3499c5328201f1” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://zeen1717.github.io/zeeeeen/2022/10/25/hello.ipynb",
            "relUrl": "/2022/10/25/hello.ipynb",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Hello to Badminton",
            "content": "Definition . Badminton is an indoor sport of hitting a small ball made of feathers and cork with a long-handled net racket across a net. . Preparation! . Here are the things we need: . shuttlecock(Bird/Birdie) | badminton racket | two persons | empty space | . Steps . 1.To play badminton you first need to have the correct grip. First, use the thumb and index finger to pinch the two wide sides of the handle, the tiger’s mouth is aligned with the side edge, and the other three fingers follow the trend and stick to the wide side of the index finger in turn to form a grip. . . 2.Always hit the center of the ball. As a novice, I suggest that you should hit the center of the round rubber ball head every time, this will improve your accuracy and success rate without missing the ball . . 3.Hit the ball with the highest point centered on you. Whether it’s serving or catching, hitting the ball at the highest point is the best way to control where it falls, and don’t wait until the ball is getting close to you before hitting it, otherwise the ball will lose momentum and height. . . 4.Hit the ball to the bottom line. It takes precision and power to hit the ball to the back line, which can make your opponent have to back off and take a lot of effort to get your ball back. If you’re not sure where to hit the next shot, and there’s a lot of space in the backcourt, go there. In the beginning, aim the ball a little bit ahead of the baseline so you won’t hit the ball if it goes beyond the baseline. . . 5.Always return to the center of the field. No matter what the situation is, you should return to the center of the court after serving and receiving the ball, so that you can deal with emergencies at the first time, and prevent the opponent from using the distance difference to prevent us from receiving the ball and then winning. . . Hacks . Test running a Python file directly . From python directory run quiz.py in VS Code, this will show workflow of Input and Output in terminal | . Build your own Jupyter Notebook meeting these College Board and CTE competencies . Build your own quiz, including my questions and show outputs | Create both Markdown for description and Code for execution | Structure your Python code with comments “#” to complement Markdown descriptions | . Additional requirements . Build your quiz so that it captures the key Vocabulary from this Jupyter document | Calculate the percentage of your quiz | Review College Board Big Idea outline, see if you can reference locations in Markdown that support vocabulary | . Extra credit, Advanced . Do you see repeating pattern of code? Try to implement solution to avoid the repeating pattern (hint: list and iteration) | .",
            "url": "https://zeen1717.github.io/zeeeeen/badminton",
            "relUrl": "/badminton",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Python Web API Endpoints using Jokes",
            "content": "Model for API . We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. . This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. . jokes_data contains a list of dictionary records containing joke and reactions:haha or boohoo - joke_list contains collection of jokes we will put into jokes_data | . | Next comes some functions to interact with our jokes . def initJokes(): initializes jokes_data | def getJokes(): returns the complete list of jokes | def getJoke(): returns a single joke from our list | ... many more function can be examined by reading comments below ... | . | . import random jokes_data = [] joke_list = [ &quot;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will &quot; &quot;frustrate them for a lifetime.&quot;, &quot;Q: Why did I divide sin by tan? A: Just cos.&quot;, &quot;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&quot;, &quot;Enter any 11-digit prime number to continue.&quot;, &quot;If at first you don&#39;t succeed; call it version 1.0.&quot;, &quot;Java programmers are some of the most materialistic people I know, very object-oriented&quot;, &quot;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just &quot; &quot;1 byte. And then everything crashed.&quot;, &quot;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&quot;, &quot;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&quot;, &quot;Q: What’s a aliens favorite computer key? A: the space bar!&quot;, &quot;There are 10 types of people in the world: those who understand binary, and those who don’t.&quot;, &quot;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&quot;, &quot;Computers make very fast, very accurate mistakes.&quot;, &quot;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&quot;, &quot;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&quot;, &quot;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&quot;, &quot;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&quot;, &#39;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#39; ] # Initialize jokes def initJokes(): # setup jokes into a dictionary with id, joke, haha, boohoo item_id = 0 for item in joke_list: jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) item_id += 1 # prime some haha responses for i in range(200): id = getRandomJoke()[&#39;id&#39;] addJokeHaHa(id) # prime some haha responses for i in range(50): id = getRandomJoke()[&#39;id&#39;] addJokeBooHoo(id) # Return all jokes from jokes_data def getJokes(): return(jokes_data) # Joke getter def getJoke(id): return(jokes_data[id]) # Return random joke from jokes_data def getRandomJoke(): return(random.choice(jokes_data)) # Liked joke def favoriteJoke(): best = 0 bestID = -1 for joke in getJokes(): if joke[&#39;haha&#39;] &gt; best: best = joke[&#39;haha&#39;] bestID = joke[&#39;id&#39;] return jokes_data[bestID] # Jeered joke def jeeredJoke(): worst = 0 worstID = -1 for joke in getJokes(): if joke[&#39;boohoo&#39;] &gt; worst: worst = joke[&#39;boohoo&#39;] worstID = joke[&#39;id&#39;] return jokes_data[worstID] # Add to haha for requested id def addJokeHaHa(id): jokes_data[id][&#39;haha&#39;] = jokes_data[id][&#39;haha&#39;] + 1 return jokes_data[id][&#39;haha&#39;] # Add to boohoo for requested id def addJokeBooHoo(id): jokes_data[id][&#39;boohoo&#39;] = jokes_data[id][&#39;boohoo&#39;] + 1 return jokes_data[id][&#39;boohoo&#39;] # Pretty Print joke def printJoke(joke): print(joke[&#39;id&#39;], joke[&#39;joke&#39;], &quot; n&quot;, &quot;haha:&quot;, joke[&#39;haha&#39;], &quot; n&quot;, &quot;boohoo:&quot;, joke[&#39;boohoo&#39;], &quot; n&quot;) # Number of jokes def countJokes(): return len(jokes_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initJokes() # initialize jokes # Most likes and most jeered best = favoriteJoke() print(&quot;Most liked&quot;, best[&#39;haha&#39;]) printJoke(best) worst = jeeredJoke() print(&quot;Most jeered&quot;, worst[&#39;boohoo&#39;]) printJoke(worst) # Random joke print(&quot;Random joke&quot;) printJoke(getRandomJoke()) # Count of Jokes print(&quot;Jokes Count: &quot; + str(countJokes())) . Most liked 15 11 If it wasn&#39;t for C, we’d all be programming in BASI and OBOL. haha: 15 boohoo: 4 Most jeered 5 2 UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity. haha: 12 boohoo: 5 Random joke 6 The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just 1 byte. And then everything crashed. haha: 11 boohoo: 1 Jokes Count: 18 . Backend Interface for Web API (Control) . An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems:1. Python Backend that stores data beyond a single Web page2. GH Pages/Fastpages Frontend that is responsible for presenting data . To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: . https://flask.nighthawkcodingsociety.com/api/jokes | https://flask.nighthawkcodingsociety.com/api/jokes/2 | https://flask.nighthawkcodingsociety.com/api/jokes/random | . As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. . The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. . FYI, there is NO output from this section . . from flask import Blueprint, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building import requests # used for testing import random # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/jokes&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api) class JokesAPI: # not implemented, this would be where we would allow creation of a new Joke class _Create(Resource): def post(self, joke): pass # getJokes() class _Read(Resource): def get(self): return jsonify(getJokes()) # getJoke(id) class _ReadID(Resource): def get(self, id): return jsonify(getJoke(id)) # getRandomJoke() class _ReadRandom(Resource): def get(self): return jsonify(getRandomJoke()) # getRandomJoke() class _ReadCount(Resource): def get(self): count = countJokes() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) # put method: addJokeHaHa class _UpdateLike(Resource): def put(self, id): addJokeHaHa(id) return jsonify(getJoke(id)) # put method: addJokeBooHoo class _UpdateJeer(Resource): def put(self, id): addJokeBooHoo(id) return jsonify(getJoke(id)) # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes api.add_resource(_Create, &#39;/create/&lt;string:joke&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . Frontend (View Simulation) and Hacks . This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. . To work with this code and make observation for learning... . Run a local server from flask_portfolio project and the change server variable to be local | Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests | The &quot;requests&quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. | Try running this with Debugging and observe what data is being created at each step (Required) | Try to format this data in Python print statements to be more readable (Required) | Start and stop local server and observe errors | . # server = &quot;http://127.0.0.1:5000/&quot; # run local server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server url = server + &quot;api/jokes/&quot; responses = [] # responses list # Get the count of jokes on server count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] # Update likes/dislikes test sequence num = str(random.randint(0, count-1)) # test a random record responses.append( requests.get(url+num) # Get/read joke by id ) responses.append( requests.put(url+&quot;like/&quot;+num) # Put/add to like count ) responses.append( requests.put(url+&quot;jeer/&quot;+num) # Put/add to jeer count ) # Get a random joke responses.append( requests.get(url+&quot;random&quot;) # Get/read a random joke ) # Cycle through and print responses for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) . KeyboardInterrupt Traceback (most recent call last) /home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb Cell 7 in &lt;cell line: 17&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; num = str(random.randint(0, count-1)) # test a random record &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; responses.append( &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; requests.get(url+num) # Get/read joke by id &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; ) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; responses.append( &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; requests.put(url+&#34;like/&#34;+num) # Put/add to like count &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=18&#39;&gt;19&lt;/a&gt; ) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=19&#39;&gt;20&lt;/a&gt; responses.append( &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=20&#39;&gt;21&lt;/a&gt; requests.put(url+&#34;jeer/&#34;+num) # Put/add to jeer count &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; ) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/zeen/vscode/zeeeeen/_notebooks/2022-10-10-PBL-webapi_tutorial.ipynb#W6sdnNjb2RlLXJlbW90ZQ%3D%3D?line=23&#39;&gt;24&lt;/a&gt; # Get a random joke File ~/anaconda3/lib/python3.9/site-packages/requests/api.py:132, in put(url, data, **kwargs) 120 def put(url, data=None, **kwargs): 121 r&#34;&#34;&#34;Sends a PUT request. 122 123 :param url: URL for the new :class:`Request` object. (...) 129 :rtype: requests.Response 130 &#34;&#34;&#34; --&gt; 132 return request(&#39;put&#39;, url, data=data, **kwargs) File ~/anaconda3/lib/python3.9/site-packages/requests/api.py:61, in request(method, url, **kwargs) 57 # By using the &#39;with&#39; statement we are sure the session is closed, thus we 58 # avoid leaving sockets open which can trigger a ResourceWarning in some 59 # cases, and look like a memory leak in others. 60 with sessions.Session() as session: &gt; 61 return session.request(method=method, url=url, **kwargs) File ~/anaconda3/lib/python3.9/site-packages/requests/sessions.py:529, in Session.request(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json) 524 send_kwargs = { 525 &#39;timeout&#39;: timeout, 526 &#39;allow_redirects&#39;: allow_redirects, 527 } 528 send_kwargs.update(settings) --&gt; 529 resp = self.send(prep, **send_kwargs) 531 return resp File ~/anaconda3/lib/python3.9/site-packages/requests/sessions.py:645, in Session.send(self, request, **kwargs) 642 start = preferred_clock() 644 # Send the request --&gt; 645 r = adapter.send(request, **kwargs) 647 # Total elapsed time of the request (approximately) 648 elapsed = preferred_clock() - start File ~/anaconda3/lib/python3.9/site-packages/requests/adapters.py:440, in HTTPAdapter.send(self, request, stream, timeout, verify, cert, proxies) 438 try: 439 if not chunked: --&gt; 440 resp = conn.urlopen( 441 method=request.method, 442 url=url, 443 body=request.body, 444 headers=request.headers, 445 redirect=False, 446 assert_same_host=False, 447 preload_content=False, 448 decode_content=False, 449 retries=self.max_retries, 450 timeout=timeout 451 ) 453 # Send the request. 454 else: 455 if hasattr(conn, &#39;proxy_pool&#39;): File ~/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:703, in HTTPConnectionPool.urlopen(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw) 700 self._prepare_proxy(conn) 702 # Make the request on the httplib connection object. --&gt; 703 httplib_response = self._make_request( 704 conn, 705 method, 706 url, 707 timeout=timeout_obj, 708 body=body, 709 headers=headers, 710 chunked=chunked, 711 ) 713 # If we&#39;re going to release the connection in ``finally:``, then 714 # the response doesn&#39;t need to know about the connection. Otherwise 715 # it will also try to release it and we&#39;ll have a double-release 716 # mess. 717 response_conn = conn if not release_conn else None File ~/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:386, in HTTPConnectionPool._make_request(self, conn, method, url, timeout, chunked, **httplib_request_kw) 384 # Trigger any extra validation we need to do. 385 try: --&gt; 386 self._validate_conn(conn) 387 except (SocketTimeout, BaseSSLError) as e: 388 # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout. 389 self._raise_timeout(err=e, url=url, timeout_value=conn.timeout) File ~/anaconda3/lib/python3.9/site-packages/urllib3/connectionpool.py:1040, in HTTPSConnectionPool._validate_conn(self, conn) 1038 # Force connect early to allow us to validate the connection. 1039 if not getattr(conn, &#34;sock&#34;, None): # AppEngine might not have `.sock` -&gt; 1040 conn.connect() 1042 if not conn.is_verified: 1043 warnings.warn( 1044 ( 1045 &#34;Unverified HTTPS request is being made to host &#39;%s&#39;. &#34; (...) 1050 InsecureRequestWarning, 1051 ) File ~/anaconda3/lib/python3.9/site-packages/urllib3/connection.py:358, in HTTPSConnection.connect(self) 356 def connect(self): 357 # Add certificate verification --&gt; 358 self.sock = conn = self._new_conn() 359 hostname = self.host 360 tls_in_tls = False File ~/anaconda3/lib/python3.9/site-packages/urllib3/connection.py:174, in HTTPConnection._new_conn(self) 171 extra_kw[&#34;socket_options&#34;] = self.socket_options 173 try: --&gt; 174 conn = connection.create_connection( 175 (self._dns_host, self.port), self.timeout, **extra_kw 176 ) 178 except SocketTimeout: 179 raise ConnectTimeoutError( 180 self, 181 &#34;Connection to %s timed out. (connect timeout=%s)&#34; 182 % (self.host, self.timeout), 183 ) File ~/anaconda3/lib/python3.9/site-packages/urllib3/util/connection.py:85, in create_connection(address, timeout, source_address, socket_options) 83 if source_address: 84 sock.bind(source_address) &gt; 85 sock.connect(sa) 86 return sock 88 except socket.error as e: KeyboardInterrupt: .",
            "url": "https://zeen1717.github.io/zeeeeen/techtalk/webapi",
            "relUrl": "/techtalk/webapi",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://google-translate1.p.rapidapi.com/language/translate/v2/languages&quot; headers = { &quot;Accept-Encoding&quot;: &quot;application/gzip&quot;, &quot;X-RapidAPI-Key&quot;: &quot;179987897bmsh8a5982e0cb09756p1d6505jsn2477ea246422&quot;, &quot;X-RapidAPI-Host&quot;: &quot;google-translate1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) #print(response.text) # End Rapid API Code #json = response.json() # convert response to python json object print(&quot;data&quot;) data = response.json().get(&quot;data&quot;) languages = data[&quot;languages&quot;] for language in languages: print( language, language[&quot;language&quot;]) # for key, value in languages(): # print(key, value) # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . data {&#39;language&#39;: &#39;af&#39;} af {&#39;language&#39;: &#39;ak&#39;} ak {&#39;language&#39;: &#39;am&#39;} am {&#39;language&#39;: &#39;ar&#39;} ar {&#39;language&#39;: &#39;as&#39;} as {&#39;language&#39;: &#39;ay&#39;} ay {&#39;language&#39;: &#39;az&#39;} az {&#39;language&#39;: &#39;be&#39;} be {&#39;language&#39;: &#39;bg&#39;} bg {&#39;language&#39;: &#39;bho&#39;} bho {&#39;language&#39;: &#39;bm&#39;} bm {&#39;language&#39;: &#39;bn&#39;} bn {&#39;language&#39;: &#39;bs&#39;} bs {&#39;language&#39;: &#39;ca&#39;} ca {&#39;language&#39;: &#39;ceb&#39;} ceb {&#39;language&#39;: &#39;ckb&#39;} ckb {&#39;language&#39;: &#39;co&#39;} co {&#39;language&#39;: &#39;cs&#39;} cs {&#39;language&#39;: &#39;cy&#39;} cy {&#39;language&#39;: &#39;da&#39;} da {&#39;language&#39;: &#39;de&#39;} de {&#39;language&#39;: &#39;doi&#39;} doi {&#39;language&#39;: &#39;dv&#39;} dv {&#39;language&#39;: &#39;ee&#39;} ee {&#39;language&#39;: &#39;el&#39;} el {&#39;language&#39;: &#39;en&#39;} en {&#39;language&#39;: &#39;eo&#39;} eo {&#39;language&#39;: &#39;es&#39;} es {&#39;language&#39;: &#39;et&#39;} et {&#39;language&#39;: &#39;eu&#39;} eu {&#39;language&#39;: &#39;fa&#39;} fa {&#39;language&#39;: &#39;fi&#39;} fi {&#39;language&#39;: &#39;fr&#39;} fr {&#39;language&#39;: &#39;fy&#39;} fy {&#39;language&#39;: &#39;ga&#39;} ga {&#39;language&#39;: &#39;gd&#39;} gd {&#39;language&#39;: &#39;gl&#39;} gl {&#39;language&#39;: &#39;gn&#39;} gn {&#39;language&#39;: &#39;gom&#39;} gom {&#39;language&#39;: &#39;gu&#39;} gu {&#39;language&#39;: &#39;ha&#39;} ha {&#39;language&#39;: &#39;haw&#39;} haw {&#39;language&#39;: &#39;he&#39;} he {&#39;language&#39;: &#39;hi&#39;} hi {&#39;language&#39;: &#39;hmn&#39;} hmn {&#39;language&#39;: &#39;hr&#39;} hr {&#39;language&#39;: &#39;ht&#39;} ht {&#39;language&#39;: &#39;hu&#39;} hu {&#39;language&#39;: &#39;hy&#39;} hy {&#39;language&#39;: &#39;id&#39;} id {&#39;language&#39;: &#39;ig&#39;} ig {&#39;language&#39;: &#39;ilo&#39;} ilo {&#39;language&#39;: &#39;is&#39;} is {&#39;language&#39;: &#39;it&#39;} it {&#39;language&#39;: &#39;iw&#39;} iw {&#39;language&#39;: &#39;ja&#39;} ja {&#39;language&#39;: &#39;jv&#39;} jv {&#39;language&#39;: &#39;jw&#39;} jw {&#39;language&#39;: &#39;ka&#39;} ka {&#39;language&#39;: &#39;kk&#39;} kk {&#39;language&#39;: &#39;km&#39;} km {&#39;language&#39;: &#39;kn&#39;} kn {&#39;language&#39;: &#39;ko&#39;} ko {&#39;language&#39;: &#39;kri&#39;} kri {&#39;language&#39;: &#39;ku&#39;} ku {&#39;language&#39;: &#39;ky&#39;} ky {&#39;language&#39;: &#39;la&#39;} la {&#39;language&#39;: &#39;lb&#39;} lb {&#39;language&#39;: &#39;lg&#39;} lg {&#39;language&#39;: &#39;ln&#39;} ln {&#39;language&#39;: &#39;lo&#39;} lo {&#39;language&#39;: &#39;lt&#39;} lt {&#39;language&#39;: &#39;lus&#39;} lus {&#39;language&#39;: &#39;lv&#39;} lv {&#39;language&#39;: &#39;mai&#39;} mai {&#39;language&#39;: &#39;mg&#39;} mg {&#39;language&#39;: &#39;mi&#39;} mi {&#39;language&#39;: &#39;mk&#39;} mk {&#39;language&#39;: &#39;ml&#39;} ml {&#39;language&#39;: &#39;mn&#39;} mn {&#39;language&#39;: &#39;mni-Mtei&#39;} mni-Mtei {&#39;language&#39;: &#39;mr&#39;} mr {&#39;language&#39;: &#39;ms&#39;} ms {&#39;language&#39;: &#39;mt&#39;} mt {&#39;language&#39;: &#39;my&#39;} my {&#39;language&#39;: &#39;ne&#39;} ne {&#39;language&#39;: &#39;nl&#39;} nl {&#39;language&#39;: &#39;no&#39;} no {&#39;language&#39;: &#39;nso&#39;} nso {&#39;language&#39;: &#39;ny&#39;} ny {&#39;language&#39;: &#39;om&#39;} om {&#39;language&#39;: &#39;or&#39;} or {&#39;language&#39;: &#39;pa&#39;} pa {&#39;language&#39;: &#39;pl&#39;} pl {&#39;language&#39;: &#39;ps&#39;} ps {&#39;language&#39;: &#39;pt&#39;} pt {&#39;language&#39;: &#39;qu&#39;} qu {&#39;language&#39;: &#39;ro&#39;} ro {&#39;language&#39;: &#39;ru&#39;} ru {&#39;language&#39;: &#39;rw&#39;} rw {&#39;language&#39;: &#39;sa&#39;} sa {&#39;language&#39;: &#39;sd&#39;} sd {&#39;language&#39;: &#39;si&#39;} si {&#39;language&#39;: &#39;sk&#39;} sk {&#39;language&#39;: &#39;sl&#39;} sl {&#39;language&#39;: &#39;sm&#39;} sm {&#39;language&#39;: &#39;sn&#39;} sn {&#39;language&#39;: &#39;so&#39;} so {&#39;language&#39;: &#39;sq&#39;} sq {&#39;language&#39;: &#39;sr&#39;} sr {&#39;language&#39;: &#39;st&#39;} st {&#39;language&#39;: &#39;su&#39;} su {&#39;language&#39;: &#39;sv&#39;} sv {&#39;language&#39;: &#39;sw&#39;} sw {&#39;language&#39;: &#39;ta&#39;} ta {&#39;language&#39;: &#39;te&#39;} te {&#39;language&#39;: &#39;tg&#39;} tg {&#39;language&#39;: &#39;th&#39;} th {&#39;language&#39;: &#39;ti&#39;} ti {&#39;language&#39;: &#39;tk&#39;} tk {&#39;language&#39;: &#39;tl&#39;} tl {&#39;language&#39;: &#39;tr&#39;} tr {&#39;language&#39;: &#39;ts&#39;} ts {&#39;language&#39;: &#39;tt&#39;} tt {&#39;language&#39;: &#39;ug&#39;} ug {&#39;language&#39;: &#39;uk&#39;} uk {&#39;language&#39;: &#39;ur&#39;} ur {&#39;language&#39;: &#39;uz&#39;} uz {&#39;language&#39;: &#39;vi&#39;} vi {&#39;language&#39;: &#39;xh&#39;} xh {&#39;language&#39;: &#39;yi&#39;} yi {&#39;language&#39;: &#39;yo&#39;} yo {&#39;language&#39;: &#39;zh&#39;} zh {&#39;language&#39;: &#39;zh-CN&#39;} zh-CN {&#39;language&#39;: &#39;zh-TW&#39;} zh-TW {&#39;language&#39;: &#39;zu&#39;} zu . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . This cell is dependent on running API call in cell above! . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference APIs using a Web Interface. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI Frontend. JavaScript frontend code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | Backend. &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; Making a Jokes API Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; | . | .",
            "url": "https://zeen1717.github.io/zeeeeen/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 18 print(&quot;age&quot;, age, type(age)) print() print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) PhoneNumber = &quot;254-523-4568&quot; print(&quot;PhoneNumber&quot;, PhoneNumber, type(PhoneNumber)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;Phonenumber&quot;: PhoneNumber, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name John Doe &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 18 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? PhoneNumber 254-523-4568 &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 90.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; length 3 - langs[0] Python &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;John Doe&#39;, &#39;age&#39;: 18, &#39;Phonenumber&#39;: &#39;254-523-4568&#39;, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; length 5 - person[&#34;name&#34;] John Doe &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being built on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will be able collect many instances of that pattern. . List is used to collect many instances of a pattern | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration this example will explore constructing a List of people and cars. . As we learned above, a List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list. A class usually has extra method to support working with its objects/instances. | In the example below, the expression is appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries, or a collection of many similar data patterns. The output looks similar to JavaScript Object Notation (JSON), Jekyll/GitHub pages yml files, FastPages Front Matter. As discussed we will see this key/value patter often, you will be required to understand this data structure and understand the parts. Just believe it is peasy ;) and it will become so. | . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;PhoneNumber&quot;: &quot;254-523-4568&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;PhoneNumber&quot;: &quot;541-251-7845&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Steven&quot;, &quot;LastName&quot;: &quot;Eric&quot;, &quot;DOB&quot;: &quot;November 11&quot;, &quot;Residence&quot;: &quot;New York city&quot;, &quot;PhoneNumber&quot;: &quot;895-751-2445&quot;, &quot;Email&quot;: &quot;seric@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;Toyota Highlander&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Honey&quot;, &quot;LastName&quot;: &quot;Campbell&quot;, &quot;DOB&quot;: &quot;March 3&quot;, &quot;Residence&quot;: &quot;Denver&quot;, &quot;PhoneNumber&quot;: &quot;564-189-3874&quot;, &quot;Email&quot;: &quot;hcampbell@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;Ford F-Series&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;PhoneNumber&#39;: &#39;254-523-4568&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;PhoneNumber&#39;: &#39;541-251-7845&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}, {&#39;FirstName&#39;: &#39;Steven&#39;, &#39;LastName&#39;: &#39;Eric&#39;, &#39;DOB&#39;: &#39;November 11&#39;, &#39;Residence&#39;: &#39;New York city&#39;, &#39;PhoneNumber&#39;: &#39;895-751-2445&#39;, &#39;Email&#39;: &#39;seric@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;Toyota Highlander&#39;]}, {&#39;FirstName&#39;: &#39;Honey&#39;, &#39;LastName&#39;: &#39;Campbell&#39;, &#39;DOB&#39;: &#39;March 3&#39;, &#39;Residence&#39;: &#39;Denver&#39;, &#39;PhoneNumber&#39;: &#39;564-189-3874&#39;, &#39;Email&#39;: &#39;hcampbell@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;Ford F-Series&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet, to applications, or preparing it to be stored into a database. It is a great way to exchange data between programs and programmers. Exchange of data between programs includes the data type the method/function and the format of the data type. These concepts are key to learning how to write functions, receive, and return data. This process is often referred to as an Application Programming Interface (API). . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Phone:&quot;, d_rec[&quot;PhoneNumber&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Phone: 254-523-4568 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Phone: 541-251-7845 Cars: 4Runner Steven Eric Residence: New York city Birth Day: November 11 Phone: 895-751-2445 Cars: Toyota Highlander Honey Campbell Residence: Denver Birth Day: March 3 Phone: 564-189-3874 Cars: Ford F-Series . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . # while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Phone: 254-523-4568 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Phone: 541-251-7845 Cars: 4Runner Steven Eric Residence: New York city Birth Day: November 11 Phone: 895-751-2445 Cars: Toyota Highlander Honey Campbell Residence: Denver Birth Day: March 3 Phone: 564-189-3874 Cars: Ford F-Series . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Phone: 254-523-4568 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Phone: 541-251-7845 Cars: 4Runner Steven Eric Residence: New York city Birth Day: November 11 Phone: 895-751-2445 Cars: Toyota Highlander Honey Campbell Residence: Denver Birth Day: March 3 Phone: 564-189-3874 Cars: Ford F-Series . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://zeen1717.github.io/zeeeeen/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://zeen1717.github.io/zeeeeen/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hello!! This is Zeen!!🙂 I am a student in Del Norte High School! Let me show you some pictures of Husky🐶. They are very cute, right? . . . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://zeen1717.github.io/zeeeeen/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://zeen1717.github.io/zeeeeen/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}